@using DKMovies.Models.Data.DatabaseModels;
@model IEnumerable<Theater>

@{
    ViewData["Title"] = "Browse Theaters";
    var currentPage = ViewData["CurrentPage"] as int? ?? 1;
    var totalPages = ViewData["TotalPages"] as int? ?? 1;
    var googleMapsApiKey = ViewData["GoogleMapsApiKey"] as string ?? "";
}

<style>
    body {
        background-color: #f8f9fa;
    }

    .theater-section {
        padding: 40px 20px;
    }

    .theater-title {
        font-size: 1rem;
        font-weight: 600;
        margin-top: 8px;
        color: #222;
    }

    .theater-meta {
        font-size: 0.8rem;
        color: #666;
    }

    .theater-link {
        text-decoration: none;
        color: inherit;
        display: block;
        height: 100%;
    }

    .card:hover {
        transform: scale(1.02);
        transition: transform 0.2s ease-in-out;
        z-index: 1;
    }

    .card-img-top {
        border-radius: 4px 4px 0 0;
    }

    .pagination .page-item.active .page-link {
        background-color: #0d6efd;
        border-color: #0d6efd;
        color: white;
    }

    .pagination .page-link {
        color: #0d6efd;
    }

    .theater-card {
        position: relative;
        overflow: hidden;
        transition: transform 0.3s ease;
        cursor: pointer;
        background: #fff;
        border-radius: 8px;
        box-shadow: 0 2px 10px rgba(0,0,0,0.1);
    }

        .theater-card:hover {
            transform: scale(1.02);
            box-shadow: 0 4px 20px rgba(0,0,0,0.15);
        }

    .theater-image-carousel {
        position: relative;
        height: 280px;
        overflow: hidden;
        border-radius: 8px 8px 0 0;
    }

    .theater-image {
        width: 100%;
        height: 100%;
        object-fit: cover;
        transition: opacity 0.5s ease;
    }

    .theater-overlay {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: rgba(0, 0, 0, 0.6);
        backdrop-filter: blur(2px);
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: center;
        opacity: 0;
        transition: opacity 0.3s ease;
        padding: 1.5rem 1rem;
        text-align: center;
    }

        .theater-overlay .theater-title {
            color: #fff;
            font-size: 1.3rem;
            font-weight: 700;
            text-shadow: 0 0 3px rgba(0, 0, 0, 0.7), 1px 1px 2px rgba(0, 0, 0, 0.5);
            margin-bottom: 1rem;
            font-family: 'Segoe UI', 'Helvetica Neue', sans-serif;
            text-align: center;
        }

    .theater-card:hover .theater-overlay {
        opacity: 1;
    }

    .theater-view-btn {
        font-size: 1rem;
        color: white;
        background-color: rgba(13, 110, 253, 0.9);
        padding: 0.75rem 1.5rem;
        border-radius: 25px;
        text-decoration: none;
        font-weight: 600;
        transition: all 0.3s ease;
        box-shadow: 0 0 8px rgba(13, 110, 253, 0.4);
    }

        .theater-view-btn:hover {
            background-color: rgba(13, 110, 253, 1);
            color: white;
            transform: translateY(-2px);
            box-shadow: 0 4px 15px rgba(13, 110, 253, 0.6);
        }

    .theater-buttons {
        z-index: 2;
    }

        .theater-buttons a {
            margin: 0.25rem;
        }

    .scroll-theater-row {
        display: flex !important;
        flex-wrap: nowrap !important;
        overflow-x: auto !important;
        overflow-y: hidden;
        scroll-behavior: smooth;
        gap: 1rem;
        padding: 1rem 2rem;
    }

        .scroll-theater-row::-webkit-scrollbar {
            height: 8px;
        }

        .scroll-theater-row > div {
            flex-shrink: 0 !important;
            width: 300px !important;
        }

    /* Nearest theaters section styling */
    .nearest-section {
        background: #ffffff;
        border: 1px solid #e9ecef;
        margin-bottom: 2rem;
    }

    .nearest-title {
        color: #495057;
        font-weight: 600;
    }

    /* Carousel Navigation Buttons */
    .carousel-nav-btn {
        position: absolute;
        top: 50%;
        transform: translateY(-50%);
        z-index: 10;
        opacity: 0.8;
        border: none;
        border-radius: 50%;
        width: 50px;
        height: 50px;
        display: flex;
        align-items: center;
        justify-content: center;
        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.3);
        transition: all 0.3s ease;
        background-color: rgba(108, 117, 125, 0.9);
        color: white;
    }

        .carousel-nav-btn:hover {
            opacity: 1;
            transform: translateY(-50%) scale(1.1);
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.4);
            background-color: rgba(108, 117, 125, 1);
            color: white;
        }

    .carousel-nav-btn-left {
        left: 10px;
    }

    .carousel-nav-btn-right {
        right: 10px;
    }

    /* Image carousel dots */
    .image-dots {
        position: absolute;
        bottom: 10px;
        left: 50%;
        transform: translateX(-50%);
        display: flex;
        gap: 6px;
        z-index: 5;
    }

    .image-dot {
        width: 8px;
        height: 8px;
        border-radius: 50%;
        background-color: rgba(255, 255, 255, 0.5);
        cursor: pointer;
        transition: background-color 0.3s ease;
    }

        .image-dot.active {
            background-color: rgba(255, 255, 255, 1);
        }

    .theater-info {
        padding: 1.5rem;
    }

    .theater-location {
        color: #666;
        font-size: 0.9rem;
        margin-bottom: 0.5rem;
        display: flex;
        align-items: center;
        gap: 0.5rem;
    }

    .theater-phone {
        color: #0d6efd;
        font-size: 0.9rem;
        display: flex;
        align-items: center;
        gap: 0.5rem;
    }

    .auditorium-count {
        background: #e9ecef;
        color: #495057;
        padding: 0.25rem 0.75rem;
        border-radius: 15px;
        font-size: 0.8rem;
        font-weight: 500;
        margin-top: 0.5rem;
        display: inline-block;
    }

    .theater-distance {
        background: #d1ecf1;
        color: #0c5460;
        padding: 0.25rem 0.75rem;
        border-radius: 15px;
        font-size: 0.8rem;
        font-weight: 500;
        margin-top: 0.5rem;
        display: inline-block;
        margin-left: 0.5rem;
    }

    .location-section {
        background: #f8f9fa;
        border: 1px solid #dee2e6;
        border-radius: 8px;
        padding: 1rem;
        margin-bottom: 2rem;
    }

    .location-btn {
        background: #28a745;
        color: white;
        border: none;
        padding: 0.5rem 1rem;
        border-radius: 5px;
        cursor: pointer;
        font-size: 0.9rem;
    }

        .location-btn:hover {
            background: #218838;
        }

        .location-btn:disabled {
            background: #6c757d;
            cursor: not-allowed;
        }

    .loading-text {
        color: #6c757d;
        font-style: italic;
    }
</style>

<!-- Location Detection Section -->
<div class="container mt-4">
    <div class="location-section">
        <div class="d-flex align-items-center justify-content-between">
            <div>
                <h6 class="mb-1">Find Theaters Near You</h6>
                <small class="text-muted">Allow location access to see nearby theaters</small>
            </div>
            <button id="getLocationBtn" class="location-btn">
                <i class="bi bi-geo-alt"></i> Get My Location
            </button>
        </div>
        <div id="locationStatus" class="mt-2" style="display: none;">
            <small class="loading-text">Finding your location...</small>
        </div>
    </div>
</div>

<!-- Nearest Theaters Section -->
<div id="nearestTheatersSection" class="container" style="display: none;">
    <section class="nearest-section py-4">
        <div class="container">
            <h3 class="nearest-title text-center mb-4">Theaters Near You</h3>
            <div class="position-relative">
                <button class="btn carousel-nav-btn carousel-nav-btn-left scroll-left-nearest">
                    <i class="bi bi-chevron-left fs-4"></i>
                </button>

                <div class="scroll-theater-row d-flex gap-3 overflow-auto pb-2 px-5" id="nearest-theaters-scroll" style="scrollbar-width: thin;">
                    <!-- Nearest theaters will be loaded here -->
                </div>

                <button class="btn carousel-nav-btn carousel-nav-btn-right scroll-right-nearest">
                    <i class="bi bi-chevron-right fs-4"></i>
                </button>
            </div>
        </div>
    </section>
</div>

<!-- All Theaters Grid Section -->
<div class="theater-section container mt-5">
    <h1 class="mb-4 text-center">Browse All Theaters</h1>

    @if (!Model.Any())
    {
        <div class="alert alert-info text-center">
            <strong>No theaters found.</strong> Please try adjusting your search or filters.
        </div>
    }

    <div class="row row-cols-1 row-cols-sm-2 row-cols-md-2 row-cols-lg-3 g-4">
        @foreach (var theater in Model)
        {
            <div class="col">
                <div class="theater-card">
                    <div class="theater-image-carousel" id="carousel_all_@theater.ID">
                        @if (theater.TheaterImages != null && theater.TheaterImages.Any())
                        {
                            @for (int i = 0; i < theater.TheaterImages.Count(); i++)
                            {
                                var image = theater.TheaterImages.ElementAt(i);
                                <img src="@Url.Content("~/images/theaters/" + image.ImageUrl)"
                                     onerror="this.onerror=null;this.src='/images/default_building.png';"
                                     alt="@theater.Name"
                                     class="theater-image @(i == 0 ? "active" : "")"
                                     style="@(i == 0 ? "opacity: 1;" : "opacity: 0; position: absolute; top: 0; left: 0;")" />
                            }
                            @if (theater.TheaterImages.Count() > 1)
                            {
                                <div class="image-dots">
                                    @for (int i = 0; i < theater.TheaterImages.Count(); i++)
                                    {
                                        <div class="image-dot @(i == 0 ? "active" : "")" data-slide="@i"></div>
                                    }
                                </div>
                            }
                        }
                        else
                        {
                            <img src="@Url.Content("~/images/default_building.png")"
                                 alt="@theater.Name"
                                 class="theater-image" />
                        }

                        <div class="theater-overlay">
                            <div class="theater-title">@theater.Name</div>
                            <a href="@Url.Action("Details", "UserTheaters", new { id = theater.ID })" class="theater-view-btn">
                                View Details
                            </a>
                        </div>
                    </div>

                    <div class="theater-info">
                        <h5 class="theater-title">@theater.Name</h5>
                        <div class="theater-location">
                            <i class="bi bi-geo-alt"></i>
                            @theater.Location
                        </div>
                        @if (!string.IsNullOrEmpty(theater.Phone))
                        {
                            <div class="theater-phone">
                                <i class="bi bi-telephone"></i>
                                @theater.Phone
                            </div>
                        }
                        @if (theater.Auditoriums != null)
                        {
                            <span class="auditorium-count">
                                @theater.Auditoriums.Count() Auditoriums
                            </span>
                        }
                    </div>
                </div>
            </div>
        }
    </div>

    <!-- Pagination -->
    <div class="mt-4 text-center">
        <nav aria-label="Page navigation">
            <ul class="pagination justify-content-center">
                @if (currentPage > 1)
                {
                    <li class="page-item">
                        <a class="page-link" asp-controller="UserTheaters" asp-action="Index" asp-route-page="@(currentPage - 1)">Previous</a>
                    </li>
                }

                @for (int i = 1; i <= totalPages; i++)
                {
                    <li class="page-item @(i == currentPage ? "active" : "")">
                        <a class="page-link" asp-controller="UserTheaters" asp-action="Index" asp-route-page="@i">@i</a>
                    </li>
                }

                @if (currentPage < totalPages)
                {
                    <li class="page-item">
                        <a class="page-link" asp-controller="UserTheaters" asp-action="Index" asp-route-page="@(currentPage + 1)">Next</a>
                    </li>
                }
            </ul>
        </nav>
    </div>
</div>

<script>
    document.addEventListener("DOMContentLoaded", function () {
        const scrollAmount = 320;
        const googleMapsApiKey = '@Html.Raw(googleMapsApiKey)';

        // Location functionality
        const getLocationBtn = document.getElementById('getLocationBtn');
        const locationStatus = document.getElementById('locationStatus');
        const nearestSection = document.getElementById('nearestTheatersSection');

        getLocationBtn.addEventListener('click', function() {
            if (navigator.geolocation) {
                getLocationBtn.disabled = true;
                locationStatus.style.display = 'block';
                locationStatus.innerHTML = '<small class="loading-text">Getting your location...</small>';

                navigator.geolocation.getCurrentPosition(
                    function(position) {
                        const userLat = position.coords.latitude;
                        const userLng = position.coords.longitude;

                        locationStatus.innerHTML = '<small class="loading-text">Finding nearby theaters...</small>';

                        // Call API to get nearest theaters
                        fetch('/UserTheaters/GetNearestTheaters', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json',
                            },
                            body: JSON.stringify({
                                UserLat: userLat,
                                UserLng: userLng
                            })
                        })
                        .then(response => response.json())
                        .then(data => {
                            displayNearestTheaters(data);
                            locationStatus.style.display = 'none';
                            getLocationBtn.disabled = false;
                            nearestSection.style.display = 'block';
                        })
                        .catch(error => {
                            console.error('Error:', error);
                            locationStatus.innerHTML = '<small class="text-danger">Error finding theaters. Please try again.</small>';
                            getLocationBtn.disabled = false;
                        });
                    },
                    function(error) {
                        locationStatus.innerHTML = '<small class="text-danger">Unable to get your location. Please enable location services.</small>';
                        getLocationBtn.disabled = false;
                    }
                );
            } else {
                alert('Geolocation is not supported by this browser.');
            }
        });

        function displayNearestTheaters(theaters) {
            const container = document.getElementById('nearest-theaters-scroll');
            container.innerHTML = '';

            theaters.forEach(theater => {
                const theaterCard = createTheaterCard(theater, true);
                container.appendChild(theaterCard);
            });

            // Initialize carousels for new theaters
            theaters.forEach(theater => {
                initImageCarousel(`carousel_nearest_${theater.id}`);
            });
        }

        function createTheaterCard(theater, showDistance = false) {
            const cardDiv = document.createElement('div');
            cardDiv.className = 'flex-shrink-0';
            cardDiv.style.width = '300px';

            const imagesHtml = theater.images && theater.images.length > 0
                ? theater.images.map((img, index) =>
                    `<img src="/images/theaters/${img.imageUrl}"
                          onerror="this.onerror=null;this.src='/images/default_building.png';"
                          alt="${theater.name}"
                          class="theater-image ${index === 0 ? 'active' : ''}"
                          style="${index === 0 ? 'opacity: 1;' : 'opacity: 0; position: absolute; top: 0; left: 0;'}" />`
                  ).join('')
                : `<img src="/images/default_building.png" alt="${theater.name}" class="theater-image" />`;

            const dotsHtml = theater.images && theater.images.length > 1
                ? `<div class="image-dots">
                     ${theater.images.map((_, index) =>
                       `<div class="image-dot ${index === 0 ? 'active' : ''}" data-slide="${index}"></div>`
                     ).join('')}
                   </div>`
                : '';

            const distanceHtml = showDistance
                ? `<span class="theater-distance">${theater.distance} km away</span>`
                : '';

            cardDiv.innerHTML = `
                <div class="theater-card">
                    <div class="theater-image-carousel" id="carousel_nearest_${theater.id}">
                        ${imagesHtml}
                        ${dotsHtml}
                        <div class="theater-overlay">
                            <div class="theater-title">${theater.name}</div>
                            <a href="/UserTheaters/Details/${theater.id}" class="theater-view-btn">
                                View Details
                            </a>
                        </div>
                    </div>
                    <div class="theater-info">
                        <h5 class="theater-title">${theater.name}</h5>
                        <div class="theater-location">
                            <i class="bi bi-geo-alt"></i>
                            ${theater.location}
                        </div>
                        ${theater.phone ? `
                            <div class="theater-phone">
                                <i class="bi bi-telephone"></i>
                                ${theater.phone}
                            </div>
                        ` : ''}
                        <span class="auditorium-count">
                            ${theater.auditoriumCount} Auditoriums
                        </span>
                        ${distanceHtml}
                    </div>
                </div>
            `;

            return cardDiv;
        }

        // Nearest Theaters Scroll
        const nearestScrollContainer = document.getElementById('nearest-theaters-scroll');
        const nearestBtnLeft = document.querySelector('.scroll-left-nearest');
        const nearestBtnRight = document.querySelector('.scroll-right-nearest');

        nearestBtnLeft?.addEventListener("click", () => {
            nearestScrollContainer.scrollBy({ left: -scrollAmount, behavior: "smooth" });
        });

        nearestBtnRight?.addEventListener("click", () => {
            nearestScrollContainer.scrollBy({ left: scrollAmount, behavior: "smooth" });
        });

        // Image carousel functionality
        function initImageCarousel(carouselId) {
            const carousel = document.getElementById(carouselId);
            if (!carousel) return;

            const images = carousel.querySelectorAll('.theater-image');
            const dots = carousel.querySelectorAll('.image-dot');

            if (images.length <= 1) return;

            let currentIndex = 0;
            let interval;

            function showImage(index) {
                // Hide all images
                images.forEach((img, i) => {
                    img.style.opacity = i === index ? '1' : '0';
                });

                // Update dots
                dots.forEach((dot, i) => {
                    dot.classList.toggle('active', i === index);
                });

                currentIndex = index;
            }

            function nextImage() {
                const nextIndex = (currentIndex + 1) % images.length;
                showImage(nextIndex);
            }

            function startAutoPlay() {
                interval = setInterval(nextImage, 6000); // Slower: 6 seconds instead of 3
            }

            function stopAutoPlay() {
                if (interval) {
                    clearInterval(interval);
                }
            }

            // Add click handlers to dots
            dots.forEach((dot, index) => {
                dot.addEventListener('click', () => {
                    showImage(index);
                    stopAutoPlay();
                    setTimeout(startAutoPlay, 2000); // Restart after 2 seconds
                });
            });

            // Add hover handlers
            carousel.addEventListener('mouseenter', stopAutoPlay);
            carousel.addEventListener('mouseleave', startAutoPlay);

            // Start autoplay
            startAutoPlay();
        }

        // Initialize all carousels for existing theaters
        document.querySelectorAll('[id^="carousel_"]').forEach(carousel => {
            initImageCarousel(carousel.id);
        });
    });
</script>