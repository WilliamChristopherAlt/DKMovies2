@using DKMovies.Models.Data.DatabaseModels;
@model IEnumerable<Notification>

@using DKMovies.Models.Data;
@inject ApplicationDbContext Context

@{
    ViewData["Title"] = "My Notifications";
}

<!-- Add Font Awesome CSS -->
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" />

<div class="container my-4">
    <div class="row mb-4">
        <div class="col-12">
            <div class="d-flex align-items-center justify-content-between">
                <h2 class="mb-0">
                    <i class="fas fa-bell text-primary me-2"></i>Your Notifications
                </h2>
                <div class="badge bg-primary fs-6">
                    @Model.Count(n => !n.IsRead) new
                </div>
            </div>
            <hr class="mt-3">
        </div>
    </div>

    @if (!Model.Any())
    {
        <div class="row justify-content-center">
            <div class="col-md-6">
                <div class="text-center py-5">
                    <i class="fas fa-bell-slash text-muted" style="font-size: 4rem;"></i>
                    <h4 class="text-muted mt-3">No notifications yet</h4>
                    <p class="text-muted">When you have new updates, they'll appear here.</p>
                </div>
            </div>
        </div>
    }
    else
    {
        <div class="row g-4">
            @foreach (var notification in Model)
            {
                // Determine if this notification should redirect
                bool shouldRedirect = notification.NotificationType == "Order Status Update" ||
                notification.NotificationType == "New Message";

                // Build the URL based on notification type
                string url = "";
                if (shouldRedirect)
                {
                    if (notification.NotificationType == "Order Status Update" && notification.TicketID.HasValue)
                    {
                        url = Url.Action("Details", "UserTickets", new { ticketId = notification.TicketID });
                    }
                    else if (notification.NotificationType == "New Message")
                    {
                        if (User.IsInRole("User"))
                        {
                            url = Url.Action("UserMessages", "UserMessages");
                        }
                        else if (User.IsInRole("Admin") || User.IsInRole("Staff"))
                        {
                            var userId = notification.MessageID.HasValue ?
                            Context.Messages.Where(m => m.ID == notification.MessageID.Value)
                            .Select(m => m.UserID).FirstOrDefault() : 0;

                            url = userId > 0 ?
                            Url.Action("StaffMessages", "UserMessages", new { userId = userId }) :
                            Url.Action("StaffMessages", "UserMessages");
                        }
                    }
                }

                <div class="col-12 col-md-6 col-xl-4">
                    <div class="notification-item @(!notification.IsRead ? "unread" : "read")"
                         data-id="@notification.ID"
                         data-url="@url"
                         data-should-redirect="@shouldRedirect.ToString().ToLower()">

                        <!-- Unread indicator -->
                        @if (!notification.IsRead)
                        {
                            <div class="unread-indicator"></div>
                        }

                        <div class="notification-header">
                            <div class="notification-icon" style="background-color: @GetIconColor(notification.NotificationType); color: white;">
                                <i class="@GetIcon(notification.NotificationType)"></i>
                            </div>
                            <div class="notification-meta">
                                <span class="notification-type">@notification.NotificationType</span>
                                <span class="notification-time">
                                    @GetTimeAgo(notification.CreatedAt)
                                </span>
                            </div>
                        </div>

                        <div class="notification-content">
                            <h6 class="notification-title">@notification.Title</h6>
                            <p class="notification-message">@notification.Message</p>
                        </div>

                        <div class="notification-footer">
                            @if (shouldRedirect)
                            {
                                <small class="text-muted">
                                    <i class="fas fa-external-link-alt me-1"></i>Click to view details
                                </small>
                            }
                            else
                            {
                                <small class="text-muted">
                                    <i class="fas fa-check me-1"></i>Click to mark as read
                                </small>
                            }
                        </div>
                    </div>
                </div>
            }
        </div>
    }
</div>

<style>
    .notification-item {
        background: #fff;
        border-radius: 12px;
        padding: 20px;
        box-shadow: 0 2px 8px rgba(0,0,0,0.08);
        border: 2px solid transparent;
        cursor: pointer;
        transition: all 0.3s ease;
        position: relative;
        height: 100%;
        display: flex;
        flex-direction: column;
        min-height: 180px;
    }

        .notification-item:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 25px rgba(0,0,0,0.15);
            border-color: #0d6efd;
        }

        .notification-item.unread {
            background: linear-gradient(135deg, #fff 0%, #f8f9ff 100%);
            border-color: #0d6efd;
            box-shadow: 0 4px 15px rgba(13, 110, 253, 0.2);
        }

            .notification-item.unread:hover {
                box-shadow: 0 8px 30px rgba(13, 110, 253, 0.3);
            }

    .unread-indicator {
        position: absolute;
        top: -2px;
        right: -2px;
        width: 12px;
        height: 12px;
        background: #dc3545;
        border-radius: 50%;
        border: 2px solid white;
        animation: pulse 2s infinite;
    }

    @@keyframes pulse {
        0%

    {
        transform: scale(1);
        opacity: 1;
    }

    50% {
        transform: scale(1.2);
        opacity: 0.7;
    }

    100% {
        transform: scale(1);
        opacity: 1;
    }

    }

    .notification-header {
        display: flex;
        align-items: center;
        margin-bottom: 15px;
    }

    .notification-icon {
        width: 45px;
        height: 45px;
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        margin-right: 12px;
        font-size: 1.2rem;
        flex-shrink: 0;
        /* Default styling - will be overridden by inline styles */
    }

    /* Override for unread notifications to use gradient */
    .notification-item.unread .notification-icon {
        background: linear-gradient(135deg, #0d6efd, #6610f2) !important;
        color: white !important;
    }

    /* Keep read notifications with their original colors but muted */
    .notification-item.read .notification-icon {
        opacity: 0.6;
        filter: grayscale(30%);
    }

    .notification-meta {
        flex: 1;
        min-width: 0;
    }

    .notification-type {
        display: block;
        font-size: 0.8rem;
        font-weight: 600;
        text-transform: uppercase;
        letter-spacing: 0.5px;
        margin-bottom: 2px;
    }

    .notification-item.unread .notification-type {
        color: #0d6efd;
    }

    .notification-item.read .notification-type {
        color: #6c757d;
    }

    .notification-time {
        font-size: 0.75rem;
        color: #6c757d;
    }

    .notification-content {
        flex: 1;
        margin-bottom: 15px;
    }

    .notification-title {
        font-size: 1rem;
        font-weight: 600;
        margin-bottom: 8px;
        line-height: 1.3;
        color: #212529;
    }

    .notification-message {
        font-size: 0.9rem;
        color: #6c757d;
        line-height: 1.4;
        margin-bottom: 0;
        display: -webkit-box;
        -webkit-line-clamp: 3;
        -webkit-box-orient: vertical;
        overflow: hidden;
    }

    .notification-footer {
        margin-top: auto;
        padding-top: 10px;
        border-top: 1px solid #e9ecef;
    }

        .notification-footer small {
            font-size: 0.75rem;
            display: flex;
            align-items: center;
        }

    .notification-item.unread .notification-footer small {
        color: #0d6efd !important;
    }

    /* Responsive adjustments */
    @@media (max-width: 768px) {
        .notification-item

    {
        min-height: 160px;
        padding: 16px;
    }

    .notification-icon {
        width: 40px;
        height: 40px;
        font-size: 1.1rem;
    }

    .notification-title {
        font-size: 0.95rem;
    }

    .notification-message {
        font-size: 0.85rem;
    }

    }
</style>

<script>
    document.addEventListener("DOMContentLoaded", function () {
        console.log("🟢 Notifications JavaScript Loaded");

        document.querySelectorAll('.notification-item').forEach(card => {
            card.addEventListener('click', function () {
                const notificationId = card.dataset.id;
                const url = card.dataset.url;
                const shouldRedirect = card.dataset.shouldRedirect === 'true';

                console.log(`🔔 Notification clicked: ID=${notificationId}, Should redirect=${shouldRedirect}, URL=${url}`);

                // Mark as read first
                markAsRead(notificationId, card);

                // Then redirect if needed
                if (shouldRedirect && url) {
                    setTimeout(() => {
                        console.log("➡️ Redirecting to:", url);
                        window.location.href = url;
                    }, 200); // Small delay to ensure mark as read completes
                }
            });
        });

        function markAsRead(notificationId, cardElement) {
            // Only mark as read if it's currently unread
            if (!cardElement.classList.contains('unread')) {
                return;
            }

            // Get the CSRF token
            const token = document.querySelector('input[name="__RequestVerificationToken"]')?.value ||
                         document.querySelector('meta[name="csrf-token"]')?.getAttribute('content');

            const headers = {
                'Content-Type': 'application/json'
            };

            if (token) {
                headers['RequestVerificationToken'] = token;
            }

            fetch('/UserNotifications/MarkAsRead', {
                method: 'POST',
                headers: headers,
                body: JSON.stringify({ notificationId: parseInt(notificationId) })
            })
            .then(response => {
                if (response.ok) {
                    console.log("✅ Marked as read:", notificationId);

                    // Update UI immediately
                    cardElement.classList.remove('unread');
                    cardElement.classList.add('read');

                    // Remove unread indicator
                    const indicator = cardElement.querySelector('.unread-indicator');
                    if (indicator) {
                        indicator.remove();
                    }

                    // Update notification count badge
                    updateNotificationCount();
                } else {
                    console.error("❌ Failed to mark as read:", response.status);
                    response.text().then(text => console.error("Response:", text));
                }
            })
            .catch(err => {
                console.error("❌ Network error:", err);
            });
        }

        function updateNotificationCount() {
            const badge = document.querySelector('.badge.bg-primary');
            if (badge) {
                const currentText = badge.textContent.trim();
                const currentCount = parseInt(currentText.split(' ')[0]);

                // Only update if we have a valid number
                if (!isNaN(currentCount) && currentCount > 0) {
                    const newCount = Math.max(0, currentCount - 1);
                    badge.textContent = `${newCount} new`;

                    if (newCount === 0) {
                        badge.style.display = 'none';
                    }
                }
            }
        }
    });
</script>

@functions {
    public string GetIcon(string notificationType)
    {
        return notificationType switch
        {
            "Account Related" => "fas fa-user-circle",
            "Order Status Update" => "fas fa-ticket-alt",
            "Security Alert" => "fas fa-shield-alt",
            "New Message" => "fas fa-envelope-open",
            "Promotion" => "fas fa-tags",
            "System Message" => "fas fa-info-circle",
            _ => "fas fa-bell"
        };
    }

    public string GetIconColor(string notificationType)
    {
        return notificationType switch
        {
            "Account Related" => "#6c757d", // Gray
            "Order Status Update" => "#28a745", // Green
            "Security Alert" => "#dc3545", // Red
            "New Message" => "#007bff", // Blue
            "Promotion" => "#fd7e14", // Orange
            "System Message" => "#6f42c1", // Purple
            _ => "#6c757d" // Default gray
        };
    }

    public string GetTimeAgo(DateTime dateTime)
    {
        var timeSpan = DateTime.Now - dateTime;

        if (timeSpan.TotalMinutes < 1)
            return "Just now";
        else if (timeSpan.TotalMinutes < 60)
            return $"{(int)timeSpan.TotalMinutes}m ago";
        else if (timeSpan.TotalHours < 24)
            return $"{(int)timeSpan.TotalHours}h ago";
        else if (timeSpan.TotalDays < 7)
            return $"{(int)timeSpan.TotalDays}d ago";
        else
            return dateTime.ToString("MMM dd");
    }
}