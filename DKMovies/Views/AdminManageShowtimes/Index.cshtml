@{
    ViewData["Title"] = "Showtimes Management";
    Layout = "~/Views/Shared/_AdminLayout.cshtml";
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Showtime Management</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            background: #f5f5f5;
            color: #333;
            line-height: 1.6;
        }

        .container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 20px;
        }

        .header {
            background: white;
            padding: 20px;
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
            margin-bottom: 20px;
        }

            .header h1 {
                font-size: 24px;
                margin-bottom: 8px;
                color: #2c3e50;
            }

        .controls {
            display: flex;
            gap: 10px;
            margin-bottom: 20px;
        }

        .btn {
            padding: 10px 20px;
            border: none;
            border-radius: 6px;
            cursor: pointer;
            font-size: 14px;
            font-weight: 500;
            transition: background-color 0.2s;
            display: flex;
            align-items: center;
        }

            .btn svg {
                margin-right: 6px;
                vertical-align: middle;
            }

        .btn-primary {
            background: #3498db;
            color: white;
        }

            .btn-primary:hover {
                background: #2980b9;
            }

        .btn-secondary {
            background: #95a5a6;
            color: white;
        }

            .btn-secondary:hover {
                background: #7f8c8d;
            }

        .btn-danger {
            background: #e74c3c;
            color: white;
        }

            .btn-danger:hover {
                background: #c0392b;
            }

        .btn:disabled {
            background: #bdc3c7;
            cursor: not-allowed;
        }

        .section {
            background: white;
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
            margin-bottom: 20px;
        }

        .section-header {
            padding: 15px 20px;
            border-bottom: 1px solid #ecf0f1;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .section-title {
            font-size: 18px;
            font-weight: 600;
            color: #2c3e50;
        }

        .count-badge {
            background: #3498db;
            color: white;
            padding: 4px 12px;
            border-radius: 12px;
            font-size: 12px;
            font-weight: 600;
        }

        .section-content {
            padding: 20px;
        }

        .showtime-item {
            display: flex;
            align-items: center;
            justify-content: space-between;
            padding: 12px;
            border: 1px solid #ecf0f1;
            border-radius: 6px;
            margin-bottom: 8px;
            background: #fafafa;
        }

        .showtime-info {
            flex: 1;
        }

        .movie-title {
            font-weight: 600;
            color: #2c3e50;
            margin-bottom: 4px;
        }

        .showtime-details {
            font-size: 13px;
            color: #7f8c8d;
        }

        .remove-btn {
            background: #e74c3c;
            color: white;
            border: none;
            padding: 6px 12px;
            border-radius: 4px;
            cursor: pointer;
            font-size: 12px;
        }

            .remove-btn:hover {
                background: #c0392b;
            }

        .loading {
            display: none;
            justify-content: center;
            align-items: center;
            padding: 40px;
        }

        .spinner {
            width: 24px;
            height: 24px;
            border: 2px solid #ecf0f1;
            border-top: 2px solid #3498db;
            border-radius: 50%;
            animation: spin 1s linear infinite;
        }

        @@keyframes spin {
            0%

        {
            transform: rotate(0deg);
        }

        100% {
            transform: rotate(360deg);
        }

        }

        .empty-state {
            text-align: center;
            padding: 40px;
            color: #7f8c8d;
        }

        .empty-icon {
            font-size: 48px;
            margin-bottom: 10px;
            opacity: 0.5;
        }

        .status-message {
            padding: 12px;
            border-radius: 6px;
            margin-bottom: 20px;
            font-weight: 500;
        }

        .status-success {
            background: #d5f4e6;
            color: #27ae60;
            border: 1px solid #a8e6bd;
        }

        .status-error {
            background: #f8d7da;
            color: #e74c3c;
            border: 1px solid #f5c6cb;
        }

        .two-column {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 20px;
        }

        .filters {
            background: white;
            padding: 15px 20px;
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
            margin-bottom: 20px;
            display: flex;
            gap: 20px;
            align-items: center;
        }

        .filter-group {
            display: flex;
            align-items: center;
            gap: 8px;
        }

            .filter-group label {
                font-weight: 500;
                color: #2c3e50;
                white-space: nowrap;
            }

            .filter-group select {
                padding: 8px 12px;
                border: 1px solid #ddd;
                border-radius: 4px;
                background: white;
                min-width: 150px;
            }

        @@media (max-width: 768px) {
            .two-column

        {
            grid-template-columns: 1fr;
        }

        .controls {
            flex-direction: column;
        }

        .filters {
            flex-direction: column;
            align-items: stretch;
        }

        .filter-group {
            justify-content: space-between;
        }

        }

        .priority-high {
            background-color: #d4edda;
            color: #155724;
        }

        .priority-medium {
            background-color: #fff3cd;
            color: #856404;
        }

        .priority-low {
            background-color: #f8d7da;
            color: #721c24;
        }

        .priority-score {
            padding: 3px 8px;
            border-radius: 4px;
            font-size: 11px;
            font-weight: bold;
            display: inline-block;
            min-width: 35px;
            text-align: center;
        }
    </style>


</head>

<body>
    <div class="container">
        <div class="header">
            <h1>Showtime Management</h1>
            <p>Manage showtimes for next week</p>
        </div>

        <div class="controls">
            <button class="btn btn-secondary" onclick="loadData()">
                <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                    <polyline points="23 4 23 10 17 10"></polyline>
                    <polyline points="1 20 1 14 7 14"></polyline>
                    <path d="M20.49 9A9 9 0 0 0 5.64 5.64L1 10m22 4l-4.64 4.36A9 9 0 0 1 3.51 15"></path>
                </svg>
                Refresh
            </button>
            <button class="btn btn-primary" id="addBtn" onclick="addAll()" disabled>
                <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                    <line x1="12" y1="5" x2="12" y2="19"></line>
                    <line x1="5" y1="12" x2="19" y2="12"></line>
                </svg>
                Add All Suggested
            </button>
            <button class="btn btn-danger" id="removeBtn" onclick="removeAll()" disabled>
                <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                    <line x1="5" y1="12" x2="19" y2="12"></line>
                </svg>
                Remove All Existing
            </button>
        </div>

        <div class="filters">
            <div class="filter-group">
                <label for="theaterFilter">Filter by Theater:</label>
                <select id="theaterFilter" onchange="applyFilters()">
                    <option value="">All Theaters</option>
                </select>
            </div>
            <div class="filter-group">
                <label for="sortOrder">Sort by Time:</label>
                <select id="sortOrder" onchange="applyFilters()">
                    <option value="asc">Earliest First</option>
                    <option value="desc">Latest First</option>
                </select>
            </div>
        </div>

        <div id="statusMessage"></div>

        <div class="loading" id="loading">
            <div class="spinner"></div>
        </div>

        <div id="content" style="display: none;">
            <div class="two-column">
                <div class="section">
                    <div class="section-header">
                        <div class="section-title">Suggested Showtimes</div>
                        <div class="count-badge" id="suggestedCount">0</div>
                    </div>
                    <div class="section-content">
                        <div id="suggestedList"></div>
                    </div>
                </div>

                <div class="section">
                    <div class="section-header">
                        <div class="section-title">Existing Showtimes</div>
                        <div class="count-badge" id="existingCount">0</div>
                    </div>
                    <div class="section-content">
                        <div id="existingList"></div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script>
        // Single set of variables
        let suggested = [];
        let existing = [];
        let filteredSuggested = [];
        let filteredExisting = [];
        let allTheaters = [];

        // Load data on page load
        loadData();

        async function loadData() {
            showLoading(true);
            clearStatus();

            try {
                const response = await fetch('/AdminManageShowtimes/GetShowtimeData', {
                    method: 'POST'
                });

                const data = await response.json();

                if (data.success) {
                    suggested = data.suggested || [];

                    // Filter existing to only include items with valid ShowTimeId
                    existing = (data.existing || []).filter(item => {
                        const id = item.showTimeId || item.ShowTimeId;
                        return id && id > 0;
                    });

                    console.log('Raw existing from server:', data.existing);
                    console.log('Filtered existing with IDs:', existing);
                    console.log('Existing IDs:', existing.map(e => e.showTimeId || e.ShowTimeId));

                    // Extract unique theaters and update filter
                    updateTheaterFilter();

                    // Apply current filters
                    applyFilters();
                } else {
                    showStatus('Error: ' + data.error, 'error');
                }
            } catch (error) {
                console.error('Load data error:', error);
                showStatus('Failed to load data', 'error');
            } finally {
                showLoading(false);
            }
        }

        function updateTheaterFilter() {
            const allItems = [...suggested, ...existing];
            allTheaters = [...new Set(allItems.map(item => item.theaterName || item.TheaterName))].sort();

            const select = document.getElementById('theaterFilter');
            const currentValue = select.value;

            console.log('All theaters found:', allTheaters);

            select.innerHTML = '<option value="">All Theaters</option>' +
                allTheaters.map(theater => `<option value="${escape(theater)}">${escape(theater)}</option>`).join('');

            // Restore previous selection if it still exists
            if (currentValue && allTheaters.includes(currentValue)) {
                select.value = currentValue;
            }
        }

        function applyFilters() {
            const theaterFilter = document.getElementById('theaterFilter').value;
            const sortOrder = document.getElementById('sortOrder').value;

            console.log('Applying filters - Theater:', theaterFilter, 'Sort:', sortOrder);

            // Filter by theater
            filteredSuggested = theaterFilter ?
                suggested.filter(item => (item.theaterName || item.TheaterName) === theaterFilter) :
                [...suggested];

            filteredExisting = theaterFilter ?
                existing.filter(item => (item.theaterName || item.TheaterName) === theaterFilter) :
                [...existing];

            console.log('Filtered suggested:', filteredSuggested.length);
            console.log('Filtered existing:', filteredExisting.length);

            // Sort by time
            const sortFn = (a, b) => {
                const timeA = new Date(a.startTime || a.StartTime);
                const timeB = new Date(b.startTime || b.StartTime);
                return sortOrder === 'asc' ? timeA - timeB : timeB - timeA;
            };

            filteredSuggested.sort(sortFn);
            filteredExisting.sort(sortFn);

            render();
        }

        function render() {
            renderList('suggestedList', filteredSuggested, 'suggestedCount', '📅 No suggestions available');
            renderList('existingList', filteredExisting, 'existingCount', '🎬 No existing showtimes');
            updateButtons();
        }

        function renderList(containerId, items, countId, emptyMsg) {
            const container = document.getElementById(containerId);
            const counter = document.getElementById(countId);

            counter.textContent = items.length;

            if (items.length === 0) {
                container.innerHTML = `<div class="empty-state"><div class="empty-icon">🎭</div><p>${emptyMsg}</p></div>`;
                return;
            }

            container.innerHTML = items.map((item, i) => `
                <div class="showtime-item" data-showtime-id="${item.showTimeId || item.ShowTimeId || ''}" data-index="${i}">
                    <div class="showtime-info">
                        <div class="movie-title">${escape(item.movieTitle || item.MovieTitle)}</div>
                        <div class="showtime-details">
                            📅 ${formatDate(item.startTime || item.StartTime)} •
                            🏢 ${escape(item.theaterName || item.TheaterName)} •
                            🎭 ${escape(item.auditoriumName || item.AuditoriumName)} •
                            💰 $${(item.price || item.Price || 0).toFixed(2)}
                        </div>
                    </div>
                    <button class="remove-btn" onclick="removeItem('${containerId}', ${i})">Remove</button>
                </div>
            `).join('');
        }

        function removeItem(listType, index) {
            if (listType === 'suggestedList') {
                const itemToRemove = filteredSuggested[index];
                const originalIndex = suggested.findIndex(item =>
                    (item.movieId || item.MovieId) === (itemToRemove.movieId || itemToRemove.MovieId) &&
                    (item.startTime || item.StartTime) === (itemToRemove.startTime || itemToRemove.StartTime) &&
                    (item.auditoriumId || item.AuditoriumId) === (itemToRemove.auditoriumId || itemToRemove.AuditoriumId)
                );
                if (originalIndex !== -1) {
                    suggested.splice(originalIndex, 1);
                }
            } else {
                const itemToRemove = filteredExisting[index];
                const originalIndex = existing.findIndex(item =>
                    (item.showTimeId || item.ShowTimeId) === (itemToRemove.showTimeId || itemToRemove.ShowTimeId)
                );
                if (originalIndex !== -1) {
                    existing.splice(originalIndex, 1);
                }
            }
            updateTheaterFilter(); // Update theater list after removal
            applyFilters();
        }

        async function addAll() {
            if (filteredSuggested.length === 0) {
                showStatus('No suggested showtimes to add (check your filters)', 'error');
                return;
            }

            const btn = document.getElementById('addBtn');
            btn.disabled = true;
            btn.textContent = 'Adding...';

            try {
                const response = await fetch('/AdminManageShowtimes/AddShowtimes', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ showtimes: filteredSuggested })
                });

                const data = await response.json();

                if (data.success) {
                    showStatus(`✅ Added ${data.addedCount} showtimes`, 'success');
                    loadData();
                } else {
                    showStatus('Error: ' + data.error, 'error');
                }
            } catch (error) {
                showStatus('Failed to add showtimes', 'error');
            } finally {
                btn.disabled = false;
                btn.innerHTML = '<svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"><line x1="12" y1="5" x2="12" y2="19"></line><line x1="5" y1="12" x2="19" y2="12"></line></svg> Add All Suggested';
            }
        }

        async function removeAll() {
            if (filteredExisting.length === 0) {
                showStatus('No existing showtimes to remove (check your filters)', 'error');
                return;
            }

            // Double-check we have valid IDs
            const itemsWithIds = filteredExisting.filter(item => {
                const id = item.showTimeId || item.ShowTimeId;
                return id && id > 0;
            });

            if (itemsWithIds.length === 0) {
                showStatus('No valid showtime IDs found to delete', 'error');
                return;
            }

            console.log('Items to delete:', itemsWithIds);
            console.log('IDs to delete:', itemsWithIds.map(e => e.showTimeId || e.ShowTimeId));

            const btn = document.getElementById('removeBtn');
            btn.disabled = true;
            btn.textContent = 'Removing...';

            try {
                const showtimesToDelete = itemsWithIds.map(item => ({
                    ShowTimeId: item.showTimeId || item.ShowTimeId,
                    MovieId: item.movieId || item.MovieId,
                    StartTime: item.startTime || item.StartTime,
                    AuditoriumId: item.auditoriumId || item.AuditoriumId,
                    Price: item.price || item.Price,
                    DurationMinutes: item.durationMinutes || item.DurationMinutes
                }));

                console.log('Sending to delete:', showtimesToDelete);

                const response = await fetch('/AdminManageShowtimes/RemoveShowtimes', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ showtimes: showtimesToDelete })
                });

                const data = await response.json();

                if (data.success) {
                    showStatus(`✅ Removed ${data.removedCount} showtimes`, 'success');
                    loadData();
                } else {
                    showStatus('Error: ' + data.error, 'error');
                }
            } catch (error) {
                console.error('Delete error:', error);
                showStatus('Failed to remove showtimes', 'error');
            } finally {
                btn.disabled = false;
                btn.innerHTML = '<svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"><line x1="5" y1="12" x2="19" y2="12"></line></svg> Remove All Existing';
            }
        }

        function updateButtons() {
            document.getElementById('addBtn').disabled = filteredSuggested.length === 0;
            document.getElementById('removeBtn').disabled = filteredExisting.length === 0;
        }

        function showLoading(show) {
            document.getElementById('loading').style.display = show ? 'flex' : 'none';
            document.getElementById('content').style.display = show ? 'none' : 'block';
        }

        function showStatus(message, type) {
            document.getElementById('statusMessage').innerHTML = `<div class="status-message status-${type}">${message}</div>`;
        }

        function clearStatus() {
            document.getElementById('statusMessage').innerHTML = '';
        }

        function formatDate(dateString) {
            return new Date(dateString).toLocaleDateString('en-US', {
                weekday: 'short',
                month: 'short',
                day: 'numeric',
                hour: 'numeric',
                minute: '2-digit',
                hour12: true
            });
        }

        function escape(text) {
            const div = document.createElement('div');
            div.textContent = text || '';
            return div.innerHTML;
        }
    </script>
</body>
</html>