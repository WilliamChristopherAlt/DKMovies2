@model List<DKMovies.Models.Message>

@{
    ViewBag.Title = "My Messages";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.5/font/bootstrap-icons.css" />

<style>
    .messages-container {
        max-width: 800px;
        margin: 0 auto;
        background: white;
        border-radius: 8px;
        box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        overflow: hidden;
    }

    .messages-header {
        background: #f8f9fa;
        padding: 1.5rem 2rem;
        border-bottom: 1px solid #dee2e6;
    }

    .messages-header h3 {
        margin: 0;
        color: #212529;
        font-size: 1.25rem;
        font-weight: 600;
    }

    .messages-header p {
        margin: 0;
        color: #6c757d;
        font-size: 0.9rem;
    }

    .messages-body {
        height: 500px;
        overflow-y: auto;
        padding: 1.5rem;
    }

    .message {
        margin-bottom: 1rem;
        display: flex;
        flex-direction: column;
    }

    .message-bubble {
        max-width: 70%;
        padding: 0.75rem 1rem;
        border-radius: 12px;
        word-break: break-word;
    }

    .message.user {
        align-items: flex-end;
    }

    .message.user .message-bubble {
        background: #007bff;
        color: white;
        border-bottom-right-radius: 4px;
    }

    .message.admin {
        align-items: flex-start;
    }

    .message.admin .message-bubble {
        background: #f8f9fa;
        color: #212529;
        border: 1px solid #dee2e6;
        border-bottom-left-radius: 4px;
    }

    .message-time {
        font-size: 0.75rem;
        color: #6c757d;
        margin-top: 0.25rem;
    }

    .message.user .message-time {
        text-align: right;
    }

    .message.admin .message-time {
        text-align: left;
    }

    .empty-state {
        text-align: center;
        padding: 3rem 1rem;
        color: #6c757d;
    }

    .empty-state i {
        font-size: 3rem;
        margin-bottom: 1rem;
        opacity: 0.5;
    }

    .input-section {
        padding: 1.5rem 2rem;
        background: #f8f9fa;
        border-top: 1px solid #dee2e6;
    }

    .input-form {
        display: flex;
        gap: 0.75rem;
        align-items: flex-end;
    }

    .input-wrapper {
        flex: 1;
        position: relative;
    }

    .input-form textarea {
        width: 100%;
        border: 1px solid #ced4da;
        border-radius: 20px;
        padding: 0.75rem 2.5rem 0.75rem 1rem;
        font-size: 0.9rem;
        resize: none;
        min-height: 44px;
        max-height: 100px;
        background: white;
        transition: border-color 0.15s ease-in-out;
    }

    .input-form textarea:focus {
        outline: none;
        border-color: #007bff;
        box-shadow: 0 0 0 2px rgba(0, 123, 255, 0.1);
    }

    .char-counter {
        position: absolute;
        right: 0.75rem;
        bottom: 0.5rem;
        font-size: 0.7rem;
        color: #adb5bd;
        pointer-events: none;
    }

    .new-messages-line {
        display: flex;
        align-items: center;
        margin: 1.5rem 0;
        text-align: center;
    }

    .new-messages-line::before,
    .new-messages-line::after {
        content: '';
        flex: 1;
        height: 1px;
        background: #dc3545;
    }

    .new-messages-text {
        padding: 0 1rem;
        background: white;
        color: #dc3545;
        font-size: 0.8rem;
        font-weight: 600;
        text-transform: uppercase;
        letter-spacing: 0.5px;
    }

    .send-btn {
        background: #007bff;
        border: none;
        border-radius: 50%;
        width: 44px;
        height: 44px;
        color: white;
        display: flex;
        align-items: center;
        justify-content: center;
        cursor: pointer;
        transition: background-color 0.15s ease-in-out;
    }

    .send-btn:hover {
        background: #0056b3;
    }

    .send-btn:disabled {
        opacity: 0.5;
        cursor: not-allowed;
    }

    @@media (max-width: 768px) {
        .messages-container {
            margin: 1rem;
            border-radius: 6px;
        }

        .messages-header,
        .input-section {
            padding: 1rem 1.5rem;
        }

        .messages-body {
            height: 400px;
            padding: 1rem;
        }

        .message-bubble {
            max-width: 85%;
        }
    }
</style>

<div class="container-fluid mt-4">
    <div class="messages-container">
        <!-- Header -->
        <div class="messages-header">
            <h3>Support Chat</h3>
            <p>We're here to help you anytime</p>
        </div>

        <!-- Messages -->
        <div class="messages-body" id="messagesBody">
            @if (Model == null || !Model.Any())
            {
                <div class="empty-state">
                    <i class="bi bi-chat-dots"></i>
                    <h5>No messages yet</h5>
                    <p>Start the conversation by sending your first message!</p>
                </div>
            }
            else
            {
                    var lastReadAdminMessageTime = ViewBag.LastReadAdminMessageTime as DateTime?;
                    bool hasShownNewMessagesLine = false;

                @foreach (var msg in Model)
                {
                    var cssClass = msg.IsFromUser ? "user" : "admin";
                    var content = System.Text.Encoding.UTF8.GetString(msg.MessageText);

                    // Show "new messages" line before the first unread admin message
                    @if (!hasShownNewMessagesLine && !msg.IsFromUser && 
                         (lastReadAdminMessageTime == null || msg.SentAt > lastReadAdminMessageTime))
                    {
                        <div class="new-messages-line">
                            <span class="new-messages-text">New Messages</span>
                        </div>
                        hasShownNewMessagesLine = true;
                    }

                    <div class="message @cssClass">
                        <div class="message-bubble">
                            <div class="message-content">@content</div>
                        </div>
                        <div class="message-time">@msg.SentAt.ToString("HH:mm - MM/dd")</div>
                    </div>
                }
            }
        </div>

        <!-- Input -->
        <div class="input-section">
            <form asp-action="UserSend" method="post" class="input-form" id="messageForm">
                @Html.AntiForgeryToken()
                <div class="input-wrapper">
                    <textarea name="messageText"
                              id="messageInput"
                              placeholder="Type your message..."
                              required
                              maxlength="1000"></textarea>
                    <div class="char-counter">
                        <span id="charCount">0</span>/1000
                    </div>
                </div>
                <button type="submit" class="send-btn" id="sendButton" title="Send message">
                    <i class="bi bi-send"></i>
                </button>
            </form>
        </div>
    </div>
</div>

<script>
    document.addEventListener("DOMContentLoaded", function () {
        const messagesBody = document.getElementById("messagesBody");
        const messageInput = document.getElementById("messageInput");
        const sendButton = document.getElementById("sendButton");
        const messageForm = document.getElementById("messageForm");
        const charCount = document.getElementById("charCount");

        // Auto-scroll to bottom
        function scrollToBottom() {
            if (messagesBody) {
                messagesBody.scrollTop = messagesBody.scrollHeight;
            }
        }

        // Character counter and auto-resize
        if (messageInput && charCount) {
            messageInput.addEventListener("input", function() {
                const length = this.value.length;
                charCount.textContent = length;

                // Auto-resize textarea
                this.style.height = "auto";
                this.style.height = Math.min(this.scrollHeight, 100) + "px";
            });
        }

        // Handle form submission
        if (messageForm) {
            messageForm.addEventListener("submit", function(e) {
                const messageText = messageInput.value.trim();
                if (!messageText) {
                    e.preventDefault();
                    return;
                }

                // Disable send button to prevent double submission
                sendButton.disabled = true;
                sendButton.innerHTML = '<i class="bi bi-arrow-clockwise"></i>';
            });
        }

        // Enter to send (Shift+Enter for new line)
        if (messageInput) {
            messageInput.addEventListener("keydown", function(e) {
                if (e.key === "Enter" && !e.shiftKey) {
                    e.preventDefault();
                    messageForm.dispatchEvent(new Event("submit"));
                }
            });

            // Focus on input when page loads
            messageInput.focus();
        }

        // Initial scroll to bottom
        scrollToBottom();
    });
</script>