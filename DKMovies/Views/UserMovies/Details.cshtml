@using DKMovies.Models.Data.DatabaseModels;
@model Movie
@{
    ViewData["Title"] = "Movie Details";

    // Wallpaper and Poster paths
    var wallpaperPath = string.IsNullOrWhiteSpace(Model.WallpaperImagePath)
        ? Url.Content("~/images/movie_wallpapers/default.jpg")
        : Url.Content($"~/images/movie_wallpapers/{Model.WallpaperImagePath}");

    var posterPath = string.IsNullOrWhiteSpace(Model.PosterImagePath)
        ? Url.Content("~/images/movie_posters/default.jpg")
        : Url.Content($"~/images/movie_posters/{Model.PosterImagePath}");

    var averageRating = ViewData["AverageRating"] as double? ?? 0;

    var isInWatchlist = ViewData["IsInWatchlist"] as bool? ?? false;

    var hasUserReviewed = ViewData["HasUserReviewed"] as bool? ?? false;

    var isAuthenticated = User.Identity?.IsAuthenticated ?? false;

    var userIdString = User.FindFirst(ClaimTypes.NameIdentifier)?.Value;
    int? userId = int.TryParse(userIdString, out int parsed) ? parsed : (int?)null;

    var similarMovies = ViewData["SimilarMovies"] as List<Movie>;
}

<!-- Load Bootstrap Icons -->
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.5/font/bootstrap-icons.css" />

<style>
    .movie-background {
        background-image: url('@wallpaperPath');
        background-size: cover;
        background-position: center;
        position: relative;
        color: white;
    }

        .movie-background::before {
            content: "";
            position: absolute;
            inset: 0;
            background: rgba(0, 0, 0, 0.45); /* dark overlay */
            z-index: 0;
        }

    .movie-content {
        position: relative;
        z-index: 1;
        padding-top: 3rem;
        padding-bottom: 3rem;
    }

    .movie-info-section {
        background: rgba(0, 0, 0, 0.75);
        padding: 2rem;
        border-radius: 10px;
        margin-top: 1rem;
    }

    .director-section {
        background: #fff;
        padding: 2rem;
        margin-top: 2rem;
        border-left: 4px solid #6c757d;
        border-radius: 8px;
    }

    .director-card {
        background: #f8f9fa;
        padding: 1.5rem;
        border-radius: 8px;
        border: 1px solid #e9ecef;
        transition: box-shadow 0.3s ease;
    }

        .director-card:hover {
            box-shadow: 0 4px 8px rgba(0,0,0,0.1);
        }

    .director-image {
        width: 120px;
        height: 160px;
        object-fit: cover;
        border-radius: 8px;
        border: 2px solid #dee2e6;
    }

    .cast-section {
        background: #fff;
        padding: 2rem;
        margin-top: 2rem;
        border-left: 4px solid #28a745;
        border-radius: 8px;
    }

    .cast-item {
        background: #f8f9fa;
        padding: 1rem;
        margin-bottom: 1rem;
        border-radius: 8px;
        border: 1px solid #e9ecef;
        transition: box-shadow 0.3s ease;
    }

        .cast-item:hover {
            box-shadow: 0 4px 8px rgba(0,0,0,0.1);
        }

        .cast-item:last-child {
            margin-bottom: 0;
        }

    .actor-image {
        width: 60px;
        height: 60px;
        object-fit: cover;
        border-radius: 50%;
        border: 2px solid #dee2e6;
    }

    .reviews-section {
        background: #f8f9fa;
        padding: 2rem;
        margin-top: 2rem;
        border-left: 4px solid #6c757d;
    }

    .review-item {
        background: white;
        padding: 1.5rem;
        margin-bottom: 1rem;
        border: 1px solid #dee2e6;
        border-radius: 8px;
        transition: all 0.3s ease;
        position: relative;
    }

        .review-item:last-child {
            margin-bottom: 0;
        }

        .review-item:hover {
            box-shadow: 0 2px 8px rgba(0,0,0,0.1);
        }

    .review-actions {
        display: flex;
        gap: 0.25rem;
        opacity: 0;
        transition: opacity 0.2s ease;
    }

    .review-item:hover .review-actions {
        opacity: 1;
    }

    .review-actions .btn {
        padding: 0.5rem 0.75rem; /* Changed from 0.25rem 0.5rem */
        font-size: 0.875rem; /* Changed from 0.75rem */
        line-height: 1.2; /* Changed from 1 */
        min-width: 36px; /* Added minimum width */
        height: 36px; /* Added fixed height */
    }

    .review-filters {
        background: white;
        padding: 1.5rem;
        border-radius: 8px;
        border: 1px solid #dee2e6;
        margin-bottom: 2rem;
    }

    .review-content {
        min-height: 60px; /* Ensure space for buttons */
        padding-bottom: 2.5rem; /* Space for buttons */
    }

    .review-actions {
        display: flex;
        gap: 0.5rem;
        opacity: 0;
        transition: opacity 0.2s ease;
        bottom: 0.5rem !important;
        right: 0.5rem !important;
    }

    .filter-group {
        display: flex;
        flex-wrap: wrap;
        gap: 1rem;
        align-items: center;
    }

    .filter-item {
        display: flex;
        flex-direction: column;
        gap: 0.25rem;
    }

        .filter-item label {
            font-size: 0.875rem;
            font-weight: 500;
            color: #495057;
            margin-bottom: 0;
        }

    .filter-select, .filter-button {
        padding: 0.5rem 0.75rem;
        border: 1px solid #ced4da;
        border-radius: 0.375rem;
        font-size: 0.875rem;
        transition: all 0.15s ease-in-out;
    }

        .filter-select:focus, .filter-button:focus {
            border-color: #80bdff;
            box-shadow: 0 0 0 0.2rem rgba(0,123,255,.25);
            outline: 0;
        }

    .filter-button {
        background-color: #f8f9fa;
        cursor: pointer;
        min-width: 120px;
    }

        .filter-button:hover {
            background-color: #e9ecef;
        }

        .filter-button.active {
            background-color: #007bff;
            color: white;
            border-color: #007bff;
        }

    .rating-dropdown {
        min-width: 150px;
    }

    .loading-spinner {
        display: none;
        text-align: center;
        padding: 2rem;
    }

        .loading-spinner.show {
            display: block;
        }

    /* Modal Enhancements */
    .modal-header {
        background-color: #f8f9fa;
        border-bottom: 1px solid #dee2e6;
    }

    .modal-footer {
        background-color: #f8f9fa;
        border-top: 1px solid #dee2e6;
    }

    #editStarRating .bi {
        cursor: pointer;
        transition: color 0.2s ease;
    }

        #editStarRating .bi:hover {
            color: #ffc107 !important;
        }

    /* Alert Animations */
    .alert {
        animation: slideDown 0.3s ease-out;
    }

    @@keyframes slideDown {
        from

    {
        transform: translateY(-20px);
        opacity: 0;
    }

    to {
        transform: translateY(0);
        opacity: 1;
    }

    }

    /* Responsive Design */
    @@media (max-width: 768px) {
        .filter-group

    {
        flex-direction: column;
        align-items: stretch;
    }

    .review-actions {
        opacity: 1; /* Always show on mobile */
    }

    .review-item {
        padding: 1rem;
    }

        .review-actions .btn {
            padding: 0.5rem 0.75rem; /* Changed from 0.25rem 0.5rem */
            font-size: 0.875rem; /* Changed from 0.75rem */
            line-height: 1.2; /* Changed from 1 */
            min-width: 36px; /* Added minimum width */
            height: 36px; /* Added fixed height */
        }
    
        .review-content {
            min-height: 60px; /* Ensure space for buttons */
            padding-bottom: 2.5rem; /* Space for buttons */
        }

        .review-actions {
            display: flex;
            gap: 0.5rem;
            opacity: 0;
            transition: opacity 0.2s ease;
            bottom: 0.5rem !important;
            right: 0.5rem !important;
        }

    .d-flex.justify-content-between.align-items-start {
        flex-direction: column;
        gap: 0.5rem;
    }

    .d-flex.align-items-center.gap-2 {
        align-self: flex-end;
        width: 100%;
        justify-content: space-between;
    }

    }

    @@media (max-width: 576px) {
        .reviews-section

    {
        padding: 1rem;
    }

    .review-filters {
        padding: 1rem;
    }

    .modal-dialog {
        margin: 1rem 0.5rem;
    }

    }

    /* Loading States */
    .btn:disabled {
        cursor: not-allowed;
        opacity: 0.6;
    }

    .btn .spinner-border-sm {
        width: 0.875rem;
        height: 0.875rem;
    }

    /* Review Content Styling */
    .review-comment {
        word-wrap: break-word;
        line-height: 1.5;
    }

    .review-stars {
        min-width: 6rem;
    }

    /* Review Item - Remove extra padding at bottom */
    .review-item {
        margin-bottom: 1.5rem;
        padding: 1rem;
        border: 1px solid #e0e0e0;
        border-radius: 8px;
        background-color: #fff;
    }

    .review-content {
        position: relative;
    }

    /* Focus States for Accessibility */
    .edit-review-btn:focus,
    .delete-review-btn:focus {
        box-shadow: 0 0 0 0.2rem rgba(0,123,255,.25);
    }

    /* Star Rating Hover Effects */
    #starRating .bi:hover,
    #editStarRating .bi:hover {
        transform: scale(1.1);
        transition: transform 0.1s ease;
    }

    /* Review Item - Remove extra padding at bottom */
    .review-item {
        margin-bottom: 1.5rem;
        padding: 1rem;
        border: 1px solid #e0e0e0;
        border-radius: 8px;
        background-color: #fff;
    }

    /* Review Content Styling */
    .review-comment {
        word-wrap: break-word;
        line-height: 1.5;
    }

    .review-stars {
        min-width: 6rem;
    }

    /* YouTube-style Like/Dislike buttons */
    .reaction-btn {
        background: none !important;
        border: none !important;
        padding: 6px 12px;
        border-radius: 18px;
        display: inline-flex;
        align-items: center;
        gap: 6px;
        font-size: 14px;
        color: #606060;
        cursor: pointer;
        transition: all 0.2s ease;
        font-weight: 500;
        margin-right: 8px;
    }

        .reaction-btn:hover {
            background-color: rgba(0, 0, 0, 0.05) !important;
        }

        .reaction-btn.active {
            color: #065fd4 !important;
        }

            .reaction-btn.active:hover {
                background-color: rgba(6, 95, 212, 0.1) !important;
            }

        .reaction-btn i {
            font-size: 16px;
        }

        .reaction-btn .like-count,
        .reaction-btn .dislike-count {
            font-size: 12px;
            color: inherit;
        }

    /* Non-authenticated reaction counts */
    .reaction-count {
        display: inline-flex;
        align-items: center;
        gap: 6px;
        font-size: 14px;
        color: #606060;
        margin-right: 16px;
    }

        .reaction-count i {
            font-size: 16px;
        }

    .reaction-section {
        margin-left: calc(6rem + 1rem); /* Align with comment text */
    }

    /* Star Rating Hover Effects */
    #starRating .bi:hover,
    #editStarRating .bi:hover {
        transform: scale(1.1);
        transition: transform 0.1s ease;
    }
</style>

@using System.Security.Claims
@{
    var role = User.FindFirst(ClaimTypes.Role)?.Value;
}

<div class="movie-background">
    <div class="container movie-content">
        <div class="row align-items-start">
            <!-- Left: Poster -->
            <div class="col-md-3 mb-4">
                <div class="shadow rounded overflow-hidden position-relative" style="padding-bottom: 150%;">
                    <img src="@posterPath" alt="@Model.Title" class="position-absolute w-100 h-100" style="object-fit: cover;">
                </div>
            </div>

            <!-- Center: Info -->
            <div class="col-md-6">
                <h2 class="mb-3">@Model.Title</h2>
                <p class="text-light">@Model.Description</p>

                <div class="mb-2"><strong>Duration:</strong> @Model.DurationMinutes minutes</div>
                <div class="mb-2"><strong>Rating:</strong> @Model.Rating?.Value</div>
                <div class="mb-2"><strong>Release Date:</strong> @(Model.ReleaseDate?.ToString("d") ?? "N/A")</div>
                <div class="mb-2"><strong>Language:</strong> @Model.Language?.Name</div>
                <div class="mb-2"><strong>Country:</strong> @Model.Country?.Name</div>
                <div class="mb-2">
                    <strong>Director:</strong>
                    @if (Model.Director != null)
                    {
                        <a asp-controller="UserDirectors" asp-action="Details" asp-route-id="@Model.Director.ID" class="text-light text-decoration-underline">
                            @Model.Director.FullName
                        </a>
                    }
                    else
                    {
                        <span>N/A</span>
                    }
                </div>

                <div class="mb-2">
                    <strong>Genres:</strong>
                    @foreach (var genre in Model.MovieGenres.Select(mg => mg.Genre.Name))
                    {
                        <span class="badge bg-light text-dark me-1">@genre</span>
                    }
                </div>

                <!-- Average Rating -->
                <div class="mb-3">
                    <strong>Average Rating:</strong>
                    <div class="d-flex align-items-center">
                        <div class="me-2">
                            @{
                                int fullStars = (int)Math.Floor(averageRating);
                                bool hasHalfStar = (averageRating - fullStars) >= 0.25 && (averageRating - fullStars) < 0.75;
                                int emptyStars = 5 - fullStars - (hasHalfStar ? 1 : 0);
                            }

                            @for (int i = 0; i < fullStars; i++)
                            {
                                <i class="bi bi-star-fill text-warning"></i>
                            }
                            @if (hasHalfStar)
                            {
                                <i class="bi bi-star-half text-warning"></i>
                            }
                            @for (int i = 0; i < emptyStars; i++)
                            {
                                <i class="bi bi-star text-warning"></i>
                            }
                        </div>
                        <span>@averageRating.ToString("F1") / 5</span>
                    </div>
                </div>
            </div>

            <!-- Right: Actions -->
            <div class="col-md-3 d-flex flex-column justify-content-center align-items-start">
                <a asp-action="Index" class="btn btn-link text-light mb-2 text-decoration-none">
                    <i class="bi bi-arrow-left me-1"></i> Back
                </a>

                @if (role == "Admin")
                {
                    <a asp-controller="AdminMovies" asp-action="Edit" asp-route-id="@Model.ID" class="btn btn-link text-light mb-2 text-decoration-none">
                        <i class="bi bi-pencil me-1"></i> Edit
                    </a>
                }
                else if (role == "User")
                {
                    @if (isInWatchlist)
                    {
                        <button class="btn btn-warning text-dark mb-2 text-decoration-none" disabled>
                            <i class="bi bi-bookmark-check-fill me-1"></i> In Watchlist
                        </button>
                    }
                    else
                    {
                        <form asp-controller="UserWatchlist" asp-action="Create" method="post" class="mb-2">
                            @Html.AntiForgeryToken()
                            <input type="hidden" name="movieId" value="@Model.ID" />
                            <button type="submit" class="btn btn-link text-light text-decoration-none">
                                <i class="bi bi-bookmark me-1"></i> Add to Watchlist
                            </button>
                        </form>
                    }

                    <a href="@Url.Action("OrderTicket", "UserTickets", new { id = Model.ID })" class="btn btn-link text-light text-decoration-none">
                        <i class="bi bi-ticket-perforated me-1"></i> Order Ticket
                    </a>

                }
                else
                {
                    <button class="btn btn-link text-secondary text-decoration-none" disabled>
                        <i class="bi bi-ticket-perforated me-1"></i> Order Ticket
                    </button>
                    <small class="text-danger d-block ms-1">Please log in as a user to order tickets.</small>
                }
            </div>
        </div>
    </div>
</div>

<!-- Director Section -->
@if (Model.Director != null)
{
    <div class="container">
        <div class="director-section">
            <h3 class="text-dark mb-4">
                <i class="bi bi-camera-reels me-2"></i>Director
            </h3>

            @{
                var directorImagePath = string.IsNullOrWhiteSpace(Model.Director.ProfileImagePath)
                ? Url.Content("~/images/default_person.png")
                : Url.Content($"~/images/directors/{Model.Director.ProfileImagePath}");
            }

            <a href="@Url.Action("Details", "UserDirectors", new { id = Model.Director.ID })" class="text-decoration-none text-reset">
                <div class="director-card">
                    <div class="row align-items-start">
                        <div class="col-auto">
                            <img src="@directorImagePath"
                                 alt="@Model.Director.FullName"
                                 class="director-image"
                                 onerror="this.onerror=null;this.src='@Url.Content("~/images/default_person.png")';" />
                        </div>
                        <div class="col">
                            <h5 class="text-dark mb-2">@Model.Director.FullName</h5>

                            @if (Model.Director.DateOfBirth.HasValue)
                            {
                                <div class="mb-2">
                                    <small class="text-muted">
                                        <i class="bi bi-calendar3 me-1"></i>
                                        Born: @Model.Director.DateOfBirth.Value.ToString("MMMM d, yyyy")
                                        @if (Model.Director.DateOfBirth.Value <= DateTime.Now)
                                        {
                                            var age = DateTime.Now.Year - Model.Director.DateOfBirth.Value.Year;
                                            if (DateTime.Now.DayOfYear < Model.Director.DateOfBirth.Value.DayOfYear)
                                                age--;
                                            <span>(Age @age)</span>
                                        }
                                    </small>
                                </div>
                            }

                            @if (!string.IsNullOrWhiteSpace(Model.Director.PlaceOfBirth))
                            {
                                <div class="mb-2">
                                    <small class="text-muted">
                                        <i class="bi bi-geo-alt me-1"></i>@Model.Director.PlaceOfBirth
                                    </small>
                                </div>
                            }

                            @if (!string.IsNullOrWhiteSpace(Model.Director.Biography))
                            {
                                <div class="mt-3">
                                    <p class="text-muted mb-0" style="font-size: 0.95rem; line-height: 1.5;">
                                        @{
                                            var biography = Model.Director.Biography;
                                            var truncatedBiography = biography.Length > 300
                                            ? biography.Substring(0, 300) + "..."
                                            : biography;
                                        }
                                        @truncatedBiography
                                    </p>
                                </div>
                            }

                            <div class="mt-3">
                                <small class="text-primary">
                                    <i class="bi bi-arrow-right me-1"></i>View full profile
                                </small>
                            </div>
                        </div>
                    </div>
                </div>
            </a>
        </div>
    </div>
}

<!-- Cast Section -->
@if (Model.MovieActors != null && Model.MovieActors.Any())
{
    <div class="container">
        <div class="cast-section">
            <h3 class="text-dark mb-4">
                <i class="bi bi-people-fill me-2"></i>Cast
            </h3>

            @foreach (var movieActor in Model.MovieActors)
            {
                var actor = movieActor.Actor;
                var actorImagePath = string.IsNullOrWhiteSpace(actor?.ProfileImagePath)
                ? Url.Content("~/images/default_person.png")
                : Url.Content($"~/images/actors/{actor.ProfileImagePath}");

                <a href="@Url.Action("Details", "UserActors", new { id = actor?.ID })" class="text-decoration-none text-reset">
                    <div class="cast-item">
                        <div class="d-flex align-items-center">
                            <img src="@actorImagePath"
                                 alt="@actor?.FullName"
                                 class="actor-image me-3"
                                 onerror="this.src='@Url.Content("~/images/default_person.png")'" />

                            <div class="flex-grow-1">
                                <div class="d-flex flex-wrap align-items-center">
                                    @if (!string.IsNullOrWhiteSpace(movieActor.Role))
                                    {
                                        <strong class="text-primary me-2">@movieActor.Role:</strong>
                                    }
                                    <span class="text-dark fs-6">@actor?.FullName</span>
                                </div>
                                @if (!string.IsNullOrWhiteSpace(actor?.PlaceOfBirth))
                                {
                                    <small class="text-muted d-block mt-1">
                                        <i class="bi bi-geo-alt me-1"></i>@actor.PlaceOfBirth
                                    </small>
                                }
                            </div>
                        </div>
                    </div>
                </a>
            }

        </div>
    </div>
}

@if (similarMovies != null && similarMovies.Any())
{
    <div class="container mt-5">
        <h3 class="text-dark mb-4">Similar Movies</h3>

        @if (similarMovies.Count == 1)
        {
            <!-- Single movie display -->
            var movie = similarMovies.First();
            var posterPath_ = string.IsNullOrWhiteSpace(movie.PosterImagePath)
            ? Url.Content("~/images/movie_posters/default.jpg")
            : Url.Content($"~/images/movie_posters/{movie.PosterImagePath}");

            <div class="d-flex justify-content-center">
                <div class="card" style="width: 300px;">
                    <a asp-controller="UserMovies" asp-action="Details" asp-route-id="@movie.ID" class="text-decoration-none">
                        <img src="@posterPath_" class="card-img-top" alt="@movie.Title" style="height: 400px; object-fit: cover;">
                        <div class="card-body text-center">
                            <h6 class="card-title text-dark">@movie.Title</h6>
                            <small class="text-muted">@(movie.ReleaseDate?.Year.ToString() ?? "N/A")</small>
                        </div>
                    </a>
                </div>
            </div>
        }
        else
        {
            <!-- Multiple movies carousel -->
            <div id="similarMoviesCarousel" class="carousel slide" data-bs-ride="false">
                <div class="carousel-inner">
                    @{
                        int moviesPerSlide = 4; // Show 4 movies per slide
                        int totalSlides = (int)Math.Ceiling((double)similarMovies.Count / moviesPerSlide);
                    }

                    @for (int slideIndex = 0; slideIndex < totalSlides; slideIndex++)
                    {
                        var moviesInSlide = similarMovies.Skip(slideIndex * moviesPerSlide).Take(moviesPerSlide);

                        <div class="carousel-item @(slideIndex == 0 ? "active" : "")">
                            <div class="row justify-content-center">
                                @foreach (var movie in moviesInSlide)
                                {
                                    var posterPath_ = string.IsNullOrWhiteSpace(movie.PosterImagePath)
                                    ? Url.Content("~/images/movie_posters/default.jpg")
                                    : Url.Content($"~/images/movie_posters/{movie.PosterImagePath}");

                                    <div class="col-lg-3 col-md-4 col-sm-6 mb-3">
                                        <div class="card h-100 shadow-sm">
                                            <a asp-controller="UserMovies" asp-action="Details" asp-route-id="@movie.ID" class="text-decoration-none">
                                                <img src="@posterPath_" class="card-img-top" alt="@movie.Title" style="height: 300px; object-fit: cover;">
                                                <div class="card-body text-center">
                                                    <h6 class="card-title text-dark mb-1" style="font-size: 0.9rem;">@movie.Title</h6>
                                                    <small class="text-muted">@(movie.ReleaseDate?.Year.ToString() ?? "N/A")</small>
                                                </div>
                                            </a>
                                        </div>
                                    </div>
                                }
                            </div>
                        </div>
                    }
                </div>

                @if (totalSlides > 1)
                {
                    <!-- Carousel controls -->
                    <button class="carousel-control-prev" type="button" data-bs-target="#similarMoviesCarousel" data-bs-slide="prev" style="width: 5%;">
                        <span class="carousel-control-prev-icon bg-dark rounded-circle p-3" aria-hidden="true"></span>
                        <span class="visually-hidden">Previous</span>
                    </button>
                    <button class="carousel-control-next" type="button" data-bs-target="#similarMoviesCarousel" data-bs-slide="next" style="width: 5%;">
                        <span class="carousel-control-next-icon bg-dark rounded-circle p-3" aria-hidden="true"></span>
                        <span class="visually-hidden">Next</span>
                    </button>

                    <!-- Indicators -->
                    <div class="carousel-indicators" style="position: relative; margin-top: 20px;">
                        @for (int i = 0; i < totalSlides; i++)
                        {
                            <button type="button" data-bs-target="#similarMoviesCarousel" data-bs-slide-to="@i"
                                    class="@(i == 0 ? "active" : "")" aria-current="@(i == 0 ? "true" : "")"
                                    aria-label="Slide @(i + 1)" style="background-color: #6c757d;"></button>
                        }
                    </div>
                }
            </div>
        }
    </div>
}
else
{
    <!-- No similar movies found -->
    <div class="container mt-5">
        <h3 class="text-dark mb-4">Similar Movies</h3>
        <div class="alert alert-info">
            <i class="bi bi-info-circle"></i> No similar movies found at the moment.
        </div>
    </div>
}

<!-- Reviews Section -->
<div class="container">
    <div class="reviews-section" id="reviews">
        @if (isAuthenticated && role == "User" && !string.IsNullOrEmpty(userIdString))
        {
            if (!hasUserReviewed)
            {
                <h5 class="text-dark mb-4">Leave a Review</h5>
                <form asp-controller="UserReviews" asp-action="LeaveReview" method="post" id="reviewForm" class="mb-4">
                    <div asp-validation-summary="ModelOnly" class="alert alert-danger"></div>

                    <input type="hidden" name="MovieID" value="@Model.ID" />
                    <input type="hidden" name="UserID" value="@userId" />
                    <input type="hidden" name="Rating" id="selectedRating" value="1" />

                    <div class="mb-3">
                        <label class="form-label d-block">Your Rating</label>
                        <div id="starRating" class="text-warning fs-4">
                            @for (int i = 1; i <= 5; i++)
                            {
                                <i class="bi @(i == 1 ? "bi-star-fill" : "bi-star")" data-value="@i" style="cursor:pointer;"></i>
                            }
                        </div>
                    </div>

                    <div class="mb-3">
                        <label for="Comment" class="form-label">Comment</label>
                        <textarea name="Comment" class="form-control" rows="3" required></textarea>

                        @if (!string.IsNullOrEmpty(ViewBag.CommentError))
                        {
                            <span class="text-danger">@ViewBag.CommentError</span>
                        }
                    </div>

                    <button type="submit" class="btn btn-primary">Submit Review</button>
                </form>

                <hr class="mb-4">
            }
            else
            {
                <div class="alert alert-info mb-4">
                    <i class="bi bi-info-circle"></i> You have already reviewed this movie.
                </div>
            }
        }

        <h3 class="text-dark mb-4">Reviews</h3>

        @if (Model.Reviews != null && Model.Reviews.Any())
        {
            <!-- Filter and Sort Controls -->
            <div class="review-filters">
                <div class="filter-group">
                    <div class="filter-item">
                        <label>Sort by Date</label>
                        <button type="button" class="filter-button" id="sortByDate" data-sort="date_desc">
                            <i class="bi bi-sort-down"></i> Newest First
                        </button>
                    </div>

                    <div class="filter-item">
                        <label>Filter by Rating</label>
                        <select class="filter-select rating-dropdown" id="ratingFilter">
                            <option value="">All Ratings</option>
                            <option value="5">5 Stars</option>
                            <option value="4">4 Stars</option>
                            <option value="3">3 Stars</option>
                            <option value="2">2 Stars</option>
                            <option value="1">1 Star</option>
                        </select>
                    </div>
                </div>
            </div>

            <div id="reviewsContainer">
                @{
                    var reviewsList = Model.Reviews.OrderByDescending(r => r.CreatedAt).ToList();
                    var initialReviews = reviewsList.Take(8);
                }

                @foreach (var review in initialReviews)
                {
                    <div class="review-item" data-review-index="@reviewsList.IndexOf(review)" data-review-id="@review.ID">
                        <div class="d-flex justify-content-between align-items-start mb-2">
                            <!-- User Info -->
                            <div class="d-flex align-items-center">
                                @if (!string.IsNullOrWhiteSpace(review.User?.ProfileImagePath))
                                {
                                    <img src="~/images/users/@review.User.ProfileImagePath"
                                         alt="@review.User.Username's Profile"
                                         class="rounded-circle me-2"
                                         style="width: 40px; height: 40px; object-fit: cover;" />
                                }
                                <span class="fw-bold">@review.User.Username</span>
                            </div>

                            <!-- Date only -->
                            <div class="text-muted small">
                                @review.CreatedAt.ToString("d")
                            </div>
                        </div>

                        <!-- Stars and comment with edit/delete buttons -->
                        <div class="d-flex align-items-start mb-2 position-relative">
                            <div class="me-3 review-stars">
                                @for (int i = 0; i < 5; i++)
                                {
                                    <i class="bi @(i < review.Rating ? "bi-star-fill" : "bi-star") text-warning"></i>
                                }
                            </div>
                            <div class="flex-grow-1">
                                <p class="mb-0 review-comment">@review.Comment</p>
                            </div>

                            @if (userId == review.UserID)
                            {
                                <div class="position-absolute" style="bottom: 0; right: 0;">
                                    <button class="btn btn-outline-primary btn-sm edit-review-btn me-1"
                                            data-review-id="@review.ID"
                                            title="Edit Review">
                                        <i class="bi bi-pencil"></i>
                                    </button>
                                    <button class="btn btn-outline-danger btn-sm delete-review-btn"
                                            data-review-id="@review.ID"
                                            title="Delete Review">
                                        <i class="bi bi-trash"></i>
                                    </button>
                                </div>
                            }
                        </div>

                        <!-- Like/Dislike buttons -->

                        <div class="reaction-section">
                            @if (isAuthenticated && !string.IsNullOrEmpty(userIdString))
                            {
                                var userLiked = review.ReviewReactions?.Any(rr => rr.UserID == userId && rr.IsLike) ?? false;
                                var userDisliked = review.ReviewReactions?.Any(rr => rr.UserID == userId && !rr.IsLike) ?? false;
                                var likeCount = review.ReviewReactions?.Count(rr => rr.IsLike) ?? 0;
                                var dislikeCount = review.ReviewReactions?.Count(rr => !rr.IsLike) ?? 0;

                                <div class="reaction-buttons d-flex align-items-center">
                                    <button class="reaction-btn like-btn @(userLiked ? "active" : "")"
                                            data-review-id="@review.ID"
                                            data-liked="@(userLiked ? "true" : "false")">
                                        <i class="bi bi-hand-thumbs-up@(userLiked ? "-fill" : "")"></i>
                                        <span class="like-count">@likeCount</span>
                                    </button>

                                    <button class="reaction-btn dislike-btn @(userDisliked ? "active" : "")"
                                            data-review-id="@review.ID"
                                            data-disliked="@(userDisliked ? "true" : "false")">
                                        <i class="bi bi-hand-thumbs-down@(userDisliked ? "-fill" : "")"></i>
                                        <span class="dislike-count">@dislikeCount</span>
                                    </button>
                                </div>
                            }
                            else
                            {
                                var likeCount = review.ReviewReactions?.Count(rr => rr.IsLike) ?? 0;
                                var dislikeCount = review.ReviewReactions?.Count(rr => !rr.IsLike) ?? 0;

                                <div class="reaction-counts d-flex align-items-center">
                                    <span class="reaction-count">
                                        <i class="bi bi-hand-thumbs-up"></i>
                                        <span>@likeCount</span>
                                    </span>
                                    <span class="reaction-count">
                                        <i class="bi bi-hand-thumbs-down"></i>
                                        <span>@dislikeCount</span>
                                    </span>
                                </div>
                            }
                        </div>
                    </div>
                }
            </div>

            <div class="loading-spinner" id="loadingSpinner">
                <div class="spinner-border text-primary" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
            </div>

            <div class="text-center mt-4" id="loadMoreContainer">
                <button id="loadMoreReviews" class="btn btn-outline-primary">
                    Load More Reviews
                </button>
            </div>
        }
        else
        {
            <p class="text-muted">No reviews available.</p>
        }
    </div>
</div>

<!-- Edit Review Modal -->
<div class="modal fade" id="editReviewModal" tabindex="-1" aria-labelledby="editReviewModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="editReviewModalLabel">Edit Review</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="editReviewForm">
                    <input type="hidden" id="editReviewId" />

                    <div class="mb-3">
                        <label class="form-label d-block">Your Rating</label>
                        <div id="editStarRating" class="text-warning fs-4">
                            <i class="bi bi-star-fill" data-value="1" style="cursor:pointer;"></i>
                            <i class="bi bi-star" data-value="2" style="cursor:pointer;"></i>
                            <i class="bi bi-star" data-value="3" style="cursor:pointer;"></i>
                            <i class="bi bi-star" data-value="4" style="cursor:pointer;"></i>
                            <i class="bi bi-star" data-value="5" style="cursor:pointer;"></i>
                        </div>
                        <input type="hidden" id="editSelectedRating" value="1" />
                    </div>

                    <div class="mb-3">
                        <label for="editComment" class="form-label">Comment</label>
                        <textarea id="editComment" class="form-control" rows="3" required></textarea>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" id="saveReviewBtn">Save Changes</button>
            </div>
        </div>
    </div>
</div>

<!-- Delete Confirmation Modal -->
<div class="modal fade" id="deleteReviewModal" tabindex="-1" aria-labelledby="deleteReviewModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="deleteReviewModalLabel">Delete Review</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <p>Are you sure you want to delete this review? This action cannot be undone.</p>
                <input type="hidden" id="deleteReviewId" />
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-danger" id="confirmDeleteBtn">Delete Review</button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        const currentUserId = '@userId';
        let profanityList = [];

        // Load profanity list
        fetch('/UserReviews/GetProfanityList')
            .then(response => response.json())
            .then(data => {
                profanityList = data;
            })
            .catch(error => {
                console.error('Error loading profanity list:', error);
            });

        // Profanity check function
        function containsProfanity(text) {
            if (!profanityList.length || !text) return false;

            const cleanText = text.toLowerCase()
                .replace(/@@/g, 'a')
                .replace(/3/g, 'e')
                .replace(/1/g, 'i')
                .replace(/0/g, 'o')
                .replace(/\$/g, 's')
                .replace(/!/g, 'i')
                .replace(/\*/g, '')
                .replace(/\s/g, '')
                .replace(/-/g, '')
                .replace(/_/g, '');

            return profanityList.some(profanity =>
                cleanText.includes(profanity) ||
                text.toLowerCase().includes(profanity)
            );
        }

        // Star rating functionality for new reviews
        const stars = document.querySelectorAll('#starRating .bi');
        const ratingInput = document.getElementById('selectedRating');

        stars.forEach(star => {
            star.addEventListener('mouseenter', () => {
                const val = parseInt(star.getAttribute('data-value'));
                highlightStars(val, '#starRating');
            });

            star.addEventListener('mouseleave', () => {
                highlightStars(parseInt(ratingInput.value), '#starRating');
            });

            star.addEventListener('click', () => {
                const val = parseInt(star.getAttribute('data-value'));
                ratingInput.value = val;
                highlightStars(val, '#starRating');
            });
        });

        // Star rating functionality for edit modal
        const editStars = document.querySelectorAll('#editStarRating .bi');
        const editRatingInput = document.getElementById('editSelectedRating');

        editStars.forEach(star => {
            star.addEventListener('mouseenter', () => {
                const val = parseInt(star.getAttribute('data-value'));
                highlightStars(val, '#editStarRating');
            });

            star.addEventListener('mouseleave', () => {
                highlightStars(parseInt(editRatingInput.value), '#editStarRating');
            });

            star.addEventListener('click', () => {
                const val = parseInt(star.getAttribute('data-value'));
                editRatingInput.value = val;
                highlightStars(val, '#editStarRating');
            });
        });

        function highlightStars(value, container) {
            const containerStars = document.querySelectorAll(`${container} .bi`);
            containerStars.forEach(star => {
                const starValue = parseInt(star.getAttribute('data-value'));
                if (starValue <= value) {
                    star.classList.remove('bi-star');
                    star.classList.add('bi-star-fill');
                } else {
                    star.classList.remove('bi-star-fill');
                    star.classList.add('bi-star');
                }
            });
        }

        // Edit review functionality
        document.addEventListener('click', function(e) {
            if (e.target.closest('.edit-review-btn')) {
                const reviewId = e.target.closest('.edit-review-btn').dataset.reviewId;
                editReview(reviewId);
            }

            if (e.target.closest('.delete-review-btn')) {
                const reviewId = e.target.closest('.delete-review-btn').dataset.reviewId;
                document.getElementById('deleteReviewId').value = reviewId;
                new bootstrap.Modal(document.getElementById('deleteReviewModal')).show();
            }
        });

        function editReview(reviewId) {
            fetch(`/UserReviews/EditReview/${reviewId}`)
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        document.getElementById('editReviewId').value = data.review.id;
                        document.getElementById('editComment').value = data.review.comment;
                        document.getElementById('editSelectedRating').value = data.review.rating;
                        highlightStars(data.review.rating, '#editStarRating');

                        new bootstrap.Modal(document.getElementById('editReviewModal')).show();
                    } else {
                        showAlert('error', data.message);
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    showAlert('error', 'Failed to load review for editing');
                });
        }

        // Save edited review
        document.getElementById('saveReviewBtn').addEventListener('click', function() {
            const reviewId = document.getElementById('editReviewId').value;
            const rating = document.getElementById('editSelectedRating').value;
            const comment = document.getElementById('editComment').value;

            // Clear any existing error messages in the modal
            const existingError = document.querySelector('#editReviewModal .alert');
            if (existingError) {
                existingError.remove();
            }

            if (!comment.trim()) {
                showModalError('Comment is required');
                return;
            }

            if (containsProfanity(comment)) {
                showModalError('Your review contains inappropriate language. Please revise your comment.');
                return;
            }

            const formData = new FormData();
            formData.append('id', reviewId);
            formData.append('rating', rating);
            formData.append('comment', comment);

            fetch('/UserReviews/UpdateReview', {
                method: 'POST',
                body: formData
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    // Update the review in the DOM
                    const reviewElement = document.querySelector(`[data-review-id="${reviewId}"]`);
                    if (reviewElement) {
                        // Update stars
                        const starsContainer = reviewElement.querySelector('.review-stars');
                        starsContainer.innerHTML = '';
                        for (let i = 0; i < 5; i++) {
                            const starClass = i < data.review.rating ? 'bi-star-fill' : 'bi-star';
                            starsContainer.innerHTML += `<i class="bi ${starClass} text-warning"></i>`;
                        }

                        // Update comment
                        reviewElement.querySelector('.review-comment').textContent = data.review.comment;
                    }

                    bootstrap.Modal.getInstance(document.getElementById('editReviewModal')).hide();
                    showAlert('success', data.message);
                } else {
                    showModalError(data.message);
                }
            })
            .catch(error => {
                console.error('Error:', error);
                showModalError('Failed to update review');
            });
        });

        // Add this new function to show errors within the modal
        function showModalError(message) {
            const modalBody = document.querySelector('#editReviewModal .modal-body');
            const alertHtml = `
                <div class="alert alert-danger alert-dismissible fade show" role="alert">
                    ${message}
                    <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                </div>
            `;

            // Insert alert at the top of the modal body
            modalBody.insertAdjacentHTML('afterbegin', alertHtml);

            // Auto-dismiss after 5 seconds
            setTimeout(() => {
                const alert = modalBody.querySelector('.alert');
                if (alert) {
                    bootstrap.Alert.getOrCreateInstance(alert).close();
                }
            }, 5000);
        }

        // Delete review
        document.getElementById('confirmDeleteBtn').addEventListener('click', function() {
            const reviewId = document.getElementById('deleteReviewId').value;

            const formData = new FormData();
            formData.append('id', reviewId);

            fetch('/UserReviews/DeleteReview', {
                method: 'POST',
                body: formData
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    // Remove the review from DOM
                    const reviewElement = document.querySelector(`[data-review-id="${reviewId}"]`);
                    if (reviewElement) {
                        reviewElement.remove();
                    }

                    bootstrap.Modal.getInstance(document.getElementById('deleteReviewModal')).hide();
                    showAlert('success', data.message);

                    // Refresh the page to update the "Leave a Review" section if needed
                    setTimeout(() => location.reload(), 1500);
                } else {
                    showAlert('error', data.message);
                }
            })
            .catch(error => {
                console.error('Error:', error);
                showAlert('error', 'Failed to delete review');
            });
        });

        function showAlert(type, message) {
            const alertClass = type === 'success' ? 'alert-success' : 'alert-danger';
            const alertHtml = `
                <div class="alert ${alertClass} alert-dismissible fade show" role="alert">
                    ${message}
                    <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                </div>
            `;

            // Insert alert at the top of the reviews section
            const reviewsSection = document.querySelector('.reviews-section');
            reviewsSection.insertAdjacentHTML('afterbegin', alertHtml);

            // Auto-dismiss after 5 seconds
            setTimeout(() => {
                const alert = reviewsSection.querySelector('.alert');
                if (alert) {
                    bootstrap.Alert.getOrCreateInstance(alert).close();
                }
            }, 5000);
        }

        // Filter and sort functionality
        document.addEventListener('DOMContentLoaded', function() {
            const movieId = @Model.ID;
            let currentSort = 'date_desc';
            let currentRatingFilter = null;
            let currentSkip = 0;
            const reviewsPerLoad = 8;

            const sortButton = document.getElementById('sortByDate');
            const ratingFilterDropdown = document.getElementById('ratingFilter');
            const loadMoreButton = document.getElementById('loadMoreReviews');
            const reviewsContainer = document.getElementById('reviewsContainer');
            const loadingSpinner = document.getElementById('loadingSpinner');
            const loadMoreContainer = document.getElementById('loadMoreContainer');

                    // Add validation to review form
            const reviewForm = document.getElementById('reviewForm');
            if (reviewForm) {
                reviewForm.addEventListener('submit', function(e) {
                    const comment = document.querySelector('textarea[name="Comment"]').value;

                    if (containsProfanity(comment)) {
                        e.preventDefault();
                        showAlert('error', 'Your review contains inappropriate language. Please revise your comment.');
                        return false;
                    }
                });
            }

            // Sort button functionality
            if (sortButton) {
                sortButton.addEventListener('click', function() {
                    if (currentSort === 'date_desc') {
                        currentSort = 'date_asc';
                        this.innerHTML = '<i class="bi bi-sort-up"></i> Oldest First';
                    } else {
                        currentSort = 'date_desc';
                        this.innerHTML = '<i class="bi bi-sort-down"></i> Newest First';
                    }
                    loadFilteredReviews(true);
                });
            }

            // Rating filter dropdown
            if (ratingFilterDropdown) {
                ratingFilterDropdown.addEventListener('change', function() {
                    const rating = this.value;
                    currentRatingFilter = rating === '' ? null : parseInt(rating);
                    loadFilteredReviews(true);
                });
            }

            // Load more functionality
            if (loadMoreButton) {
                loadMoreButton.addEventListener('click', function() {
                    loadFilteredReviews(false);
                });
            }

            function loadFilteredReviews(reset = false) {
                if (reset) {
                    currentSkip = 0;
                }

                loadingSpinner.classList.add('show');

                const params = new URLSearchParams({
                    movieId: movieId,
                    sortOrder: currentSort,
                    skip: currentSkip,
                    take: reviewsPerLoad
                });

                if (currentRatingFilter) {
                    params.append('ratingFilter', currentRatingFilter);
                }

                fetch(`/UserReviews/GetFilteredReviews?${params.toString()}`)
                    .then(response => response.json())
                    .then(data => {
                        if (reset) {
                            reviewsContainer.innerHTML = '';
                        }

                        data.reviews.forEach(review => {
                            const reviewElement = createReviewElement(review);
                            reviewsContainer.appendChild(reviewElement);
                        });

                        currentSkip += data.reviews.length;

                        if (data.hasMore) {
                            loadMoreContainer.style.display = 'block';
                        } else {
                            loadMoreContainer.style.display = 'none';
                        }

                        loadingSpinner.classList.remove('show');
                    })
                    .catch(error => {
                        console.error('Error loading reviews:', error);
                        loadingSpinner.classList.remove('show');
                    });
            }

            function createReviewElement(review) {
                const reviewDiv = document.createElement('div');
                reviewDiv.className = 'review-item';
                reviewDiv.setAttribute('data-review-id', review.id);

                const stars = Array.from({length: 5}, (_, i) =>
                    `<i class="bi ${i < review.rating ? 'bi-star-fill' : 'bi-star'} text-warning"></i>`
                ).join('');

                const profileImage = review.profileImagePath
                    ? `<img src="/images/users/${review.profileImagePath}" alt="${review.username}'s Profile" class="rounded-circle me-2" style="width: 40px; height: 40px; object-fit: cover;" />`
                    : '';

                const actionButtons = review.canEdit
                    ? `<button class="btn btn-sm btn-outline-primary edit-review-btn" data-review-id="${review.id}" title="Edit Review">
                           <i class="bi bi-pencil"></i>
                       </button>
                       <button class="btn btn-sm btn-outline-danger delete-review-btn" data-review-id="${review.id}" title="Delete Review">
                           <i class="bi bi-trash"></i>
                       </button>`
                    : '';

                const reactionButtons = currentUserId ? `
                    <div class="reaction-buttons d-flex align-items-center">
                        <button class="reaction-btn like-btn ${review.userLiked ? 'active' : ''}"
                                data-review-id="${review.id}"
                                data-liked="${review.userLiked}">
                            <i class="bi bi-hand-thumbs-up${review.userLiked ? '-fill' : ''}"></i>
                            <span class="like-count">${review.likeCount}</span>
                        </button>
                        <button class="reaction-btn dislike-btn ${review.userDisliked ? 'active' : ''}"
                                data-review-id="${review.id}"
                                data-disliked="${review.userDisliked}">
                            <i class="bi bi-hand-thumbs-down${review.userDisliked ? '-fill' : ''}"></i>
                            <span class="dislike-count">${review.dislikeCount}</span>
                        </button>
                    </div>
                ` : `
                    <div class="reaction-counts d-flex align-items-center">
                        <span class="reaction-count">
                            <i class="bi bi-hand-thumbs-up"></i>
                            <span>${review.likeCount}</span>
                        </span>
                        <span class="reaction-count">
                            <i class="bi bi-hand-thumbs-down"></i>
                            <span>${review.dislikeCount}</span>
                        </span>
                    </div>
                `;

                reviewDiv.innerHTML = `
                    <div class="d-flex justify-content-between align-items-start mb-2">
                        <div class="d-flex align-items-center">
                            ${profileImage}
                            <span class="fw-bold">${review.username}</span>
                        </div>
                        <div class="d-flex align-items-center gap-2">
                            <div class="text-muted small">${review.createdAt}</div>
                            ${actionButtons}
                        </div>
                    </div>
                    <div class="d-flex align-items-start mb-2">
                        <div class="me-3 review-stars">${stars}</div>
                        <div class="flex-grow-1">
                            <p class="mb-0 review-comment">${review.comment}</p>
                        </div>
                    </div>
                    <div class="reaction-section">
                        ${reactionButtons}
                    </div>
                `;

                return reviewDiv;
            }
        });

            // Handle like/dislike reactions
            $(document).on('click', '.like-btn, .dislike-btn', function(e) {
            e.preventDefault();

            const button = $(this);
            const reviewId = button.data('review-id');
            const isLike = button.hasClass('like-btn');

            $.ajax({
                url: '/UserReviews/ReactToReview',
                type: 'POST',
                data: {
                    reviewId: reviewId,
                    isLike: isLike
                },
                success: function(response) {
                    if (response.success) {
                        const reviewItem = button.closest('.review-item');
                        const likeBtn = reviewItem.find('.like-btn');
                        const dislikeBtn = reviewItem.find('.dislike-btn');

                        // Update counts
                        likeBtn.find('.like-count').text(response.likeCount);
                        dislikeBtn.find('.dislike-count').text(response.dislikeCount);

                        // Reset both buttons
                        likeBtn.removeClass('active').find('i')
                            .removeClass('bi-hand-thumbs-up-fill')
                            .addClass('bi-hand-thumbs-up');
                        dislikeBtn.removeClass('active').find('i')
                            .removeClass('bi-hand-thumbs-down-fill')
                            .addClass('bi-hand-thumbs-down');

                        // Update data attributes
                        likeBtn.data('liked', response.userLiked);
                        dislikeBtn.data('disliked', response.userDisliked);

                        // Apply active state to the appropriate button
                        if (response.userLiked) {
                            likeBtn.addClass('active').find('i')
                                .removeClass('bi-hand-thumbs-up')
                                .addClass('bi-hand-thumbs-up-fill');
                        } else if (response.userDisliked) {
                            dislikeBtn.addClass('active').find('i')
                                .removeClass('bi-hand-thumbs-down')
                                .addClass('bi-hand-thumbs-down-fill');
                        }
                    } else {
                        alert('Error: ' + response.message);
                    }
                },
                error: function() {
                    alert('An error occurred while processing your reaction.');
                }
            });
        });
    </script>
}