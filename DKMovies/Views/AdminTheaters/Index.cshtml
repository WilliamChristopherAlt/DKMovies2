@using DKMovies.Models.Data.DatabaseModels;
@model DKMovies.Controllers.TheaterIndexViewModel
@{
    ViewData["Title"] = "Theater Management";
    Layout = "~/Views/Shared/_AdminLayout.cshtml";
}

<!-- Header Section -->
<div class="row mb-4">
    <div class="col-12">
        <div class="card border-0 bg-gradient-primary text-white shadow-sm">
            <div class="card-body py-4">
                <div class="d-flex justify-content-between align-items-center">
                    <div>
                        <h2 class="mb-1 fw-bold">
                            <i class="fas fa-building me-2"></i>Theater Management
                        </h2>
                        <p class="mb-0 opacity-90">Manage your cinema locations</p>
                    </div>
                    <div class="d-flex gap-2">
                        <button class="btn btn-light btn-sm" onclick="location.reload()">
                            <i class="fas fa-sync-alt me-1"></i>Refresh
                        </button>
                        <a asp-action="Create" class="btn btn-warning">
                            <i class="fas fa-plus me-2"></i>Add New Theater
                        </a>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@if (!Model.Theaters.Any())
{
    <!-- Empty State -->
    <div class="row">
        <div class="col-12">
            <div class="card border-0 shadow-sm">
                <div class="card-body text-center py-5">
                    <div class="mb-4">
                        <i class="fas fa-building text-muted" style="font-size: 4rem; opacity: 0.3;"></i>
                    </div>
                    @if (!string.IsNullOrWhiteSpace(Model.SearchTerm) || Model.FilterType != "all" || !string.IsNullOrWhiteSpace(Model.LocationFilter))
                    {
                        <h4 class="text-muted mb-3">No Theaters Found</h4>
                        <p class="text-muted mb-4">
                            No theaters match your search criteria. Try adjusting your filters or search term.
                        </p>
                        <div class="d-flex gap-2 justify-content-center">
                            <a asp-action="Index" class="btn btn-outline-secondary">
                                <i class="fas fa-times me-2"></i>Clear Filters
                            </a>
                            <a asp-action="Create" class="btn btn-primary">
                                <i class="fas fa-plus me-2"></i>Add New Theater
                            </a>
                        </div>
                    }
                    else
                    {
                        <h4 class="text-muted mb-3">No Theaters Available</h4>
                        <p class="text-muted mb-4">
                            Add your first theater to start managing your cinema locations.
                        </p>
                        <a asp-action="Create" class="btn btn-primary">
                            <i class="fas fa-plus me-2"></i>Add First Theater
                        </a>
                    }
                </div>
            </div>
        </div>
    </div>
}
else
{
    <!-- Filter and Search Section -->
    <div class="row mb-3">
        <div class="col-12">
            <form asp-action="Index" method="get" id="filterForm">
                <input type="hidden" name="page" value="1" id="pageInput" />
                <div class="d-flex justify-content-between align-items-center flex-wrap gap-3">
                    <h5 class="mb-0 text-dark">
                        <i class="fas fa-list me-2 text-primary"></i>
                        Theater Network
                        <span class="badge bg-primary ms-2">@Model.TotalTheaters</span>
                    </h5>
                    <div class="d-flex gap-2 flex-wrap">
                        <div class="dropdown">
                            <button class="btn btn-outline-secondary dropdown-toggle" type="button" data-bs-toggle="dropdown">
                                <i class="fas fa-filter me-1"></i>
                                @(Model.FilterType == "all" ? "All Theaters" :
                                    Model.FilterType == "active" ? "Active Theaters" : "Inactive Theaters")
                            </button>
                            <ul class="dropdown-menu">
                                <li>
                                    <a class="dropdown-item @(Model.FilterType == "all" ? "active" : "")"
                                       href="javascript:void(0)" onclick="setFilter('all')">All Theaters</a>
                                </li>
                                <li>
                                    <a class="dropdown-item @(Model.FilterType == "active" ? "active" : "")"
                                       href="javascript:void(0)" onclick="setFilter('active')">Active Theaters</a>
                                </li>
                                <li>
                                    <a class="dropdown-item @(Model.FilterType == "inactive" ? "active" : "")"
                                       href="javascript:void(0)" onclick="setFilter('inactive')">Inactive Theaters</a>
                                </li>
                            </ul>
                        </div>
                        <div class="dropdown">
                            <button class="btn btn-outline-secondary dropdown-toggle" type="button" data-bs-toggle="dropdown">
                                <i class="fas fa-map-marker-alt me-1"></i>
                                @(string.IsNullOrWhiteSpace(Model.LocationFilter) || Model.LocationFilter == "all" ? "All Locations" : Model.LocationFilter)
                            </button>
                            <ul class="dropdown-menu">
                                <li>
                                    <a class="dropdown-item @(string.IsNullOrWhiteSpace(Model.LocationFilter) || Model.LocationFilter == "all" ? "active" : "")"
                                       href="javascript:void(0)" onclick="setLocation('all')">All Locations</a>
                                </li>
                                @foreach (var location in Model.Locations)
                                {
                                    <li>
                                        <a class="dropdown-item @(Model.LocationFilter == location ? "active" : "")"
                                           href="javascript:void(0)" onclick="setLocation('@location')">@location</a>
                                    </li>
                                }
                            </ul>
                        </div>
                        <div class="input-group" style="width: 250px;">
                            <input type="text" name="search" class="form-control"
                                   placeholder="Search theaters..." value="@Model.SearchTerm" id="searchInput">
                            <button class="btn btn-outline-secondary" type="submit">
                                <i class="fas fa-search"></i>
                            </button>
                        </div>
                        <input type="hidden" name="filter" value="@Model.FilterType" id="filterInput" />
                        <input type="hidden" name="location" value="@Model.LocationFilter" id="locationInput" />
                        <input type="hidden" name="sortBy" value="@Model.SortBy" id="sortByInput" />
                    </div>
                </div>
            </form>
        </div>
    </div>

    <!-- Results Info and Sort -->
    <div class="row mb-3">
        <div class="col-12">
            <div class="d-flex justify-content-between align-items-center">
                <small class="text-muted">
                    Showing @Model.StartItem-@Model.EndItem of @Model.TotalTheaters theaters
                    @if (!string.IsNullOrWhiteSpace(Model.SearchTerm))
                    {
                        <span> for "@Model.SearchTerm"</span>
                    }
                </small>
                <div class="d-flex gap-2 align-items-center">
                    @if (!string.IsNullOrWhiteSpace(Model.SearchTerm) || Model.FilterType != "all" || !string.IsNullOrWhiteSpace(Model.LocationFilter))
                    {
                        <a asp-action="Index" class="btn btn-sm btn-outline-secondary">
                            <i class="fas fa-times me-1"></i>Clear Filters
                        </a>
                    }
                    <div class="dropdown">
                        <button class="btn btn-sm btn-outline-secondary dropdown-toggle" type="button" data-bs-toggle="dropdown">
                            <i class="fas fa-sort me-1"></i>Sort
                        </button>
                        <ul class="dropdown-menu">
                            <li>
                                <a class="dropdown-item @(Model.SortBy == "name" ? "active" : "")"
                                   href="javascript:void(0)" onclick="setSortBy('name')">Name</a>
                            </li>
                            <li>
                                <a class="dropdown-item @(Model.SortBy == "location" ? "active" : "")"
                                   href="javascript:void(0)" onclick="setSortBy('location')">Location</a>
                            </li>
                            <li>
                                <a class="dropdown-item @(Model.SortBy == "auditoriums" ? "active" : "")"
                                   href="javascript:void(0)" onclick="setSortBy('auditoriums')">Auditoriums</a>
                            </li>
                            <li>
                                <a class="dropdown-item @(Model.SortBy == "employees" ? "active" : "")"
                                   href="javascript:void(0)" onclick="setSortBy('employees')">Employees</a>
                            </li>
                            <li>
                                <a class="dropdown-item @(Model.SortBy == "concessions" ? "active" : "")"
                                   href="javascript:void(0)" onclick="setSortBy('concessions')">Concessions</a>
                            </li>
                        </ul>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Theaters Grid -->
    <div class="row g-3" id="theatersContainer">
        @foreach (var theater in Model.Theaters)
        {
            <div class="col-xl-4 col-lg-6 col-md-6 col-12 mb-3 theater-item">
                <div class="card border-0 shadow-sm theater-card h-100" onclick="goToDetails(@theater.ID)" style="cursor: pointer;">
                    <!-- Delete Button -->
                    <button type="button" class="btn btn-danger btn-sm position-absolute delete-btn"
                            style="top: 10px; right: 10px; z-index: 10; border-radius: 50%; width: 35px; height: 35px; padding: 0;"
                            onclick="event.stopPropagation(); confirmDelete(@theater.ID, '@theater.Name')"
                            data-bs-toggle="tooltip" title="Delete Theater">
                        <i class="fas fa-trash-alt"></i>
                    </button>

                    <!-- Theater Image Section -->
                    <div class="theater-image-container" style="height: 200px; position: relative; overflow: hidden;">
                        @{
                            var theaterImages = theater.TheaterImages?.ToList() ?? new List<TheaterImage>();
                            var defaultImage = "/images/theaters/default_building.png";
                        }

                        @if (theaterImages.Any())
                        {
                            @for (int i = 0; i < theaterImages.Count(); i++)
                            {
                                var image = theaterImages[i];
                                var imagePath = $"/images/theaters/{image.ImageUrl}";
                                <img src="@imagePath"
                                     class="theater-image w-100 h-100 @(i == 0 ? "active" : "")"
                                     style="object-fit: cover; position: absolute; top: 0; left: 0; opacity: @(i == 0 ? "1" : "0"); transition: opacity 0.3s ease;"
                                     alt="@theater.Name"
                                     onerror="this.src='@defaultImage'" />
                            }

                            @if (theaterImages.Count() > 1)
                            {
                                <!-- Previous Arrow -->
                                <button class="image-nav-arrow prev"
                                        onclick="event.stopPropagation(); previousImage(@theater.ID)"
                                        title="Previous Image">
                                    <i class="fas fa-chevron-left"></i>
                                </button>

                                <!-- Next Arrow -->
                                <button class="image-nav-arrow next"
                                        onclick="event.stopPropagation(); nextImage(@theater.ID)"
                                        title="Next Image">
                                    <i class="fas fa-chevron-right"></i>
                                </button>

                                <!-- Image Navigation Dots -->
                                <div class="image-nav-dots position-absolute bottom-0 start-50 translate-middle-x mb-2">
                                    @for (int i = 0; i < theaterImages.Count(); i++)
                                    {
                                        <span class="dot @(i == 0 ? "active" : "")"
                                              onclick="event.stopPropagation(); switchImage(@theater.ID, @i)"
                                              style="cursor: pointer;"></span>
                                    }
                                </div>
                            }
                        }
                        else
                        {
                            <img src="@defaultImage"
                                 class="theater-image w-100 h-100"
                                 style="object-fit: cover;"
                                 alt="@theater.Name" />
                        }

                        <!-- Status Badge (Only Active) -->
                        <div class="position-absolute top-0 start-0 p-2">
                            @{
                                var hasCurrentShowtimes = theater.Auditoriums?.Any(a =>
                                a.ShowTimes?.Any(st => st.StartTime >= DateTime.Today && st.StartTime <= DateTime.Today.AddDays(7)) == true) == true;
                            }
                            @if (hasCurrentShowtimes)
                            {
                                <span class="badge bg-success">
                                    <i class="fas fa-play me-1"></i>Active
                                </span>
                            }
                        </div>
                    </div>

                    <!-- Card Body -->
                    <div class="card-body p-3">
                        <!-- Theater Name and Location -->
                        <div class="mb-2">
                            <h5 class="card-title mb-1 fw-bold text-dark">@theater.Name</h5>
                            <p class="text-muted mb-0 small">
                                <i class="fas fa-map-marker-alt me-1"></i>@theater.Location
                            </p>
                            @if (!string.IsNullOrWhiteSpace(theater.Phone))
                            {
                                <p class="text-muted mb-0 small">
                                    <i class="fas fa-phone me-1"></i>@theater.Phone
                                </p>
                            }
                        </div>

                        <!-- Theater Statistics -->
                        <div class="theater-stats">
                            <div class="d-flex justify-content-between text-muted small">
                                <span><i class="fas fa-door-open me-1"></i>@(theater.Auditoriums?.Count() ?? 0) Auditoriums</span>
                                <span><i class="fas fa-chair me-1"></i>@(theater.Auditoriums?.Sum(a => a.Capacity) ?? 0) Seats</span>
                            </div>
                            <div class="d-flex justify-content-between text-muted small mt-1">
                                <span><i class="fas fa-users me-1"></i>@(theater.Employees?.Count() ?? 0) Staff</span>
                                <span><i class="fas fa-shopping-cart me-1"></i>@(theater.TheaterConcessions?.Count() ?? 0) Items</span>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>

    <!-- Pagination -->
    @if (Model.TotalPages > 1)
    {
        <div class="row">
            <div class="col-12">
                <nav aria-label="Theater pagination">
                    <ul class="pagination justify-content-center">
                        <!-- Previous Page -->
                        <li class="page-item @(!Model.HasPreviousPage ? "disabled" : "")">
                            <a class="page-link" href="javascript:void(0)" onclick="changePage(@(Model.CurrentPage - 1))">
                                <i class="fas fa-chevron-left"></i>
                                <span class="d-none d-sm-inline"> Previous</span>
                            </a>
                        </li>

                        <!-- Page Numbers -->
                        @{
                            var startPage = Math.Max(1, Model.CurrentPage - 2);
                            var endPage = Math.Min(Model.TotalPages, Model.CurrentPage + 2);
                        }

                        @if (startPage > 1)
                        {
                            <li class="page-item">
                                <a class="page-link" href="javascript:void(0)" onclick="changePage(1)">1</a>
                            </li>
                            @if (startPage > 2)
                            {
                                <li class="page-item disabled">
                                    <span class="page-link">...</span>
                                </li>
                            }
                        }

                        @for (var i = startPage; i <= endPage; i++)
                        {
                            <li class="page-item @(i == Model.CurrentPage ? "active" : "")">
                                <a class="page-link" href="javascript:void(0)" onclick="changePage(@i)">@i</a>
                            </li>
                        }

                        @if (endPage < Model.TotalPages)
                        {
                            @if (endPage < Model.TotalPages - 1)
                            {
                                <li class="page-item disabled">
                                    <span class="page-link">...</span>
                                </li>
                            }
                            <li class="page-item">
                                <a class="page-link" href="javascript:void(0)" onclick="changePage(@Model.TotalPages)">@Model.TotalPages</a>
                            </li>
                        }

                        <!-- Next Page -->
                        <li class="page-item @(!Model.HasNextPage ? "disabled" : "")">
                            <a class="page-link" href="javascript:void(0)" onclick="changePage(@(Model.CurrentPage + 1))">
                                <span class="d-none d-sm-inline">Next </span>
                                <i class="fas fa-chevron-right"></i>
                            </a>
                        </li>
                    </ul>
                </nav>
            </div>
        </div>
    }
}

<!-- Delete Confirmation Modal -->
<div class="modal fade" id="deleteModal" tabindex="-1" aria-labelledby="deleteModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header bg-danger text-white">
                <h5 class="modal-title" id="deleteModalLabel">
                    <i class="fas fa-exclamation-triangle me-2"></i>Confirm Delete
                </h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <p>Are you sure you want to delete the theater "<span id="theaterNameToDelete"></span>"?</p>
                <div class="alert alert-warning">
                    <i class="fas fa-info-circle me-2"></i>
                    This action cannot be undone. All associated data will be permanently removed.
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <form asp-action="Delete" method="post" style="display: inline;" id="deleteForm">
                    <input type="hidden" name="id" id="theaterIdToDelete" />
                    <button type="submit" class="btn btn-danger">
                        <i class="fas fa-trash me-1"></i>Delete Theater
                    </button>
                </form>
            </div>
        </div>
    </div>
</div>

<!-- JavaScript -->
<script>
    // Filter and search functions
    function setFilter(filterType) {
        document.getElementById('filterInput').value = filterType;
        document.getElementById('pageInput').value = '1';
        document.getElementById('filterForm').submit();
    }

    function setLocation(location) {
        document.getElementById('locationInput').value = location;
        document.getElementById('pageInput').value = '1';
        document.getElementById('filterForm').submit();
    }

    function setSortBy(sortBy) {
        document.getElementById('sortByInput').value = sortBy;
        document.getElementById('pageInput').value = '1';
        document.getElementById('filterForm').submit();
    }

    function changePage(page) {
        document.getElementById('pageInput').value = page;
        document.getElementById('filterForm').submit();
    }

    // Navigation function
    function goToDetails(theaterId) {
        window.location.href = '@Url.Action("Details", "AdminTheaters")/' + theaterId;
    }

    // Delete confirmation
    function confirmDelete(theaterId, theaterName) {
        document.getElementById('theaterIdToDelete').value = theaterId;
        document.getElementById('theaterNameToDelete').textContent = theaterName;

        var deleteModal = new bootstrap.Modal(document.getElementById('deleteModal'));
        deleteModal.show();
    }

    // Initialize tooltips
    document.addEventListener('DOMContentLoaded', function() {
        var tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'));
        var tooltipList = tooltipTriggerList.map(function (tooltipTriggerEl) {
            return new bootstrap.Tooltip(tooltipTriggerEl);
        });

        // Add hover effects to theater cards
        document.querySelectorAll('.theater-card').forEach(function(card) {
            card.addEventListener('mouseenter', function() {
                this.style.transform = 'translateY(-2px)';
                this.style.transition = 'transform 0.2s ease-in-out';
            });

            card.addEventListener('mouseleave', function() {
                this.style.transform = 'translateY(0)';
            });
        });

        // Search on Enter key
        document.getElementById('searchInput').addEventListener('keypress', function(e) {
            if (e.key === 'Enter') {
                e.preventDefault();
                document.getElementById('pageInput').value = '1';
                document.getElementById('filterForm').submit();
            }
        });
    });

    // Auto-refresh every 5 minutes for real-time updates
    setInterval(function() {
        if (document.visibilityState === 'visible') {
            // Only refresh if no modals are open
            if (!document.querySelector('.modal.show')) {
                location.reload();
            }
        }
    }, 300000); // 5 minutes
</script>

<!-- Custom CSS -->
<!-- Custom CSS -->
<style>
    .bg-gradient-primary {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    }

    #theatersContainer {
        margin-left: -0.75rem;
        margin-right: -0.75rem;
    }

    .theater-item {
        padding-left: 0.75rem;
        padding-right: 0.75rem;
    }

    .theater-card {
        transition: all 0.3s ease;
        position: relative;
        overflow: hidden;
        min-height: 320px;
    }

        .theater-card:hover {
            transform: translateY(-3px);
            box-shadow: 0 12px 30px rgba(0,0,0,0.15) !important;
        }

    .theater-image-container {
        position: relative;
        background: #f8f9fa;
    }

    .theater-image {
        transition: opacity 0.3s ease;
    }

    .image-nav-dots {
        display: flex;
        gap: 8px;
    }

    .dot {
        width: 8px;
        height: 8px;
        border-radius: 50%;
        background-color: rgba(255, 255, 255, 0.5);
        border: 1px solid rgba(255, 255, 255, 0.8);
        transition: all 0.3s ease;
    }

        .dot.active {
            background-color: rgba(255, 255, 255, 0.9);
            transform: scale(1.2);
        }

        .dot:hover {
            background-color: rgba(255, 255, 255, 0.8);
        }

    /* Image Navigation Arrows */
    .image-nav-arrow {
        position: absolute;
        top: 50%;
        transform: translateY(-50%);
        background-color: rgba(0, 0, 0, 0.5);
        color: white;
        border: none;
        border-radius: 50%;
        width: 35px;
        height: 35px;
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 14px;
        cursor: pointer;
        opacity: 0;
        transition: all 0.3s ease;
        z-index: 5;
    }

        .image-nav-arrow:hover {
            background-color: rgba(0, 0, 0, 0.7);
            transform: translateY(-50%) scale(1.1);
        }

        .image-nav-arrow.prev {
            left: 10px;
        }

        .image-nav-arrow.next {
            right: 10px;
        }

    .theater-card:hover .image-nav-arrow {
        opacity: 1;
    }

    .card-title {
        color: #2c3e50;
        font-size: 1.1rem;
        line-height: 1.3;
    }

    .theater-stats {
        font-size: 0.85rem;
        padding-top: 0.5rem;
        border-top: 1px solid #e9ecef;
    }

    .delete-btn {
        opacity: 0;
        transition: opacity 0.3s ease;
    }

    .theater-card:hover .delete-btn {
        opacity: 1;
    }

    .pagination .page-link {
        color: #667eea;
        border-color: #dee2e6;
        padding: 0.5rem 0.75rem;
    }

    .pagination .page-item.active .page-link {
        background-color: #667eea;
        border-color: #667eea;
    }

    .pagination .page-link:hover {
        color: #764ba2;
        background-color: #f8f9fa;
        border-color: #dee2e6;
    }

    /* Responsive Design */
    @@media (max-width: 1200px) {
        .theater-card

    {
        min-height: 300px;
    }

    .theater-image-container {
        height: 180px;
    }

    }

    @@media (max-width: 992px) {
        .theater-card

    {
        min-height: 280px;
    }

    .theater-image-container {
        height: 160px;
    }

    .card-title {
        font-size: 1rem;
    }

    }

    @@media (max-width: 768px) {
        .theater-card

    {
        min-height: 260px;
    }

    .theater-image-container {
        height: 140px;
    }

    .delete-btn {
        opacity: 1;
        width: 30px;
        height: 30px;
        top: 5px;
        right: 5px;
    }

    .image-nav-arrow {
        opacity: 1;
        width: 30px;
        height: 30px;
        font-size: 12px;
    }

        .image-nav-arrow.prev {
            left: 5px;
        }

        .image-nav-arrow.next {
            right: 5px;
        }

    .card-title {
        font-size: 0.95rem;
    }

    .theater-stats {
        font-size: 0.8rem;
    }

    .d-flex.gap-2.flex-wrap {
        flex-direction: column;
        gap: 0.5rem !important;
    }

    .input-group {
        width: 100% !important;
    }

    }

    @@media (max-width: 576px) {
        .theater-card

    {
        min-height: 240px;
    }

    .theater-image-container {
        height: 120px;
    }

    .pagination {
        justify-content: center !important;
        flex-wrap: wrap;
        font-size: 0.875rem;
    }

        .pagination .page-link {
            padding: 0.375rem 0.5rem;
        }

    }

    @@media (max-width: 480px) {
        .theater-card

    {
        min-height: 220px;
    }

    .theater-image-container {
        height: 100px;
    }

    .card-body {
        padding: 0.75rem !important;
    }

    .row.g-3 {
        --bs-gutter-x: 0.75rem;
    }

    }
</style>

<!-- Additional JavaScript for Image Switching -->
<script>
    function switchImage(theaterId, imageIndex) {
        const card = document.querySelector(`[onclick*="goToDetails(${theaterId})"]`);
        const images = card.querySelectorAll('.theater-image');
        const dots = card.querySelectorAll('.dot');

        // Hide all images and deactivate all dots
        images.forEach(img => img.style.opacity = '0');
        dots.forEach(dot => dot.classList.remove('active'));

        // Show selected image and activate corresponding dot
        if (images[imageIndex]) {
            images[imageIndex].style.opacity = '1';
        }
        if (dots[imageIndex]) {
            dots[imageIndex].classList.add('active');
        }
    }
</script>

<script>
    // Store current image index for each theater
    const theaterImageIndex = {};

    function switchImage(theaterId, imageIndex) {
        const card = document.querySelector(`[onclick*="goToDetails(${theaterId})"]`);
        const images = card.querySelectorAll('.theater-image');
        const dots = card.querySelectorAll('.dot');

        // Hide all images and deactivate all dots
        images.forEach(img => img.style.opacity = '0');
        dots.forEach(dot => dot.classList.remove('active'));

        // Show selected image and activate corresponding dot
        if (images[imageIndex]) {
            images[imageIndex].style.opacity = '1';
        }
        if (dots[imageIndex]) {
            dots[imageIndex].classList.add('active');
        }

        // Store current index
        theaterImageIndex[theaterId] = imageIndex;
    }

    function nextImage(theaterId) {
        const card = document.querySelector(`[onclick*="goToDetails(${theaterId})"]`);
        const images = card.querySelectorAll('.theater-image');
        const totalImages = images.length;

        if (totalImages <= 1) return;

        const currentIndex = theaterImageIndex[theaterId] || 0;
        const nextIndex = (currentIndex + 1) % totalImages;

        switchImage(theaterId, nextIndex);
    }

    function previousImage(theaterId) {
        const card = document.querySelector(`[onclick*="goToDetails(${theaterId})"]`);
        const images = card.querySelectorAll('.theater-image');
        const totalImages = images.length;

        if (totalImages <= 1) return;

        const currentIndex = theaterImageIndex[theaterId] || 0;
        const prevIndex = (currentIndex - 1 + totalImages) % totalImages;

        switchImage(theaterId, prevIndex);
    }

    // Initialize image indices on page load
    document.addEventListener('DOMContentLoaded', function() {
        document.querySelectorAll('.theater-card').forEach(function(card) {
            const theaterId = card.getAttribute('onclick').match(/goToDetails\((\d+)\)/)[1];
            theaterImageIndex[theaterId] = 0;
        });
    });
</script>